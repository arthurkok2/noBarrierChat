import React, { Component } from "react";
import SubmitButton from "./SubmitButton";
import firebase from "./firebase";
import AlertMessage from "./AlertMessage";


class AddFriendButton extends Component {
    constructor() {
        super();
        this.state = {
            nickname:"",
            openedChats: [],
            error: false,
            errorMessage:"",
        }
    }


    // When the component gets mounted then  get all the 

    componentDidMount() {

        // Getting the reference of all the opened chats of the user
        const friendsReference = firebase.database().ref(`${this.props.userId}/chats`)

        // Seting up listener in order to get any changes on the database of incoming conversations.

        friendsReference.on("value", (snapshot) => {
            const openedChats = [];
            const openedChatsData = snapshot.val();
            
            for (let chat in openedChatsData) {
            
                openedChats.push(openedChatsData[chat].nickname);
            }

            // changin the state and rerendering the page
            
            this.setState({
                openedChats:openedChats
            })

        })

    }

    // A method for the onSubmit of the form that checks if the nickname the user inputs is valid first and if it is then creates a chat between both users on the database.
    
    addFriend = (event) => {
        event.preventDefault()
        
        const usersId = []

        // Checking if theres no opened conversations opened with that user and that the user isnt trying to start a conversation with itself
        
        if(this.state.openedChats.includes(this.state.nickname) || (this.state.nickname === this.props.userNickname)){
            
            // Show the error message 
            this.setState({
                errorMessage: `You already have an opened chat with ${this.state.nickname} or you are trying to chat with yourself`,
                error: true
            });
            
        }else{

            // If not, then check if the nickname matches an existing user

            const databaseRef = firebase.database().ref();
        
            databaseRef.once("value").then((snapshot) => {
                
                const databaseData = snapshot.val()

                // Creating an empty array to store the promises generated by the listener

                const arrayPromises = []

                // For every key in the snapshot that is not the general configuration (basically all users) get the promise of that users nicknames and push it to the promise array

                for (let user in databaseData) {
                    if (user !== "generalConfig") {
                        
                        usersId.push(user);
                        const userRef = firebase.database().ref(`${user}/settings/nickname`);
                        arrayPromises.push(userRef.once("value"));
                        
                    }
                }
        
                // Using promise.all to make sure to get all values before doing anything
    
                Promise.all(arrayPromises).then((values) => {
                    let found = false;
                    values.forEach((value, index) => {
                        
                        if (value.val() === this.state.nickname) {
                            found = true;
                            
                            // If found check th other user doesnt have more than 5 conversations

                            firebase.database().ref(`${usersId[index]}/chats`).once("value").then((snapshot)=>{
                                const conversationArray = [];
                                const conversationData = snapshot.val();
                                for(let conversation in conversationData){
                                    conversationArray.push(conversation);
                                }

                                // If there are less than 5 conversations opened by the other user then create the conversation between both users if not then show the error.

                                if(conversationArray.length < 5){
                                    firebase.database().ref(`${this.props.userId}/chats`).update({
                                        [usersId[index]]: {
                                            nickname: this.state.nickname,
                                            messages:""
                                        }
                                    })
            
                                    firebase.database().ref(`${usersId[index]}/chats`).update({
                                        [this.props.userId]: {
                                            nickname: this.props.userNickname,
                                            messages: ""
                                        }
                                    })

                                }else{
                                    this.setState({
                                        errorMessage: "The user you are trying to reach has already 5 conversations opened.",
                                        error: true
                                    });
                                }
                            })
                            
                        } else if (index === (values.length - 1) && !found) {
                           
                            // If after going through all the nicknames there is no match then show the message that the user doesn't exists

                            this.setState({
                                errorMessage: `Looks like ${this.state.nickname} doesn't have an account with us!`,
                                error: true
                            });
                        }
                    }) 
                }) 
            })
        }
    }
    

    // Render the component

    render() {
        return (
            <div>

                {/* If the state error is true then show the Alert explaining the error */}

                {
                    this.state.error
                    
                    &&
                        <AlertMessage
                            title="Oops! There is a problem!"
                            message={this.state.errorMessage}
                            functionToClose={() => { this.setState({ error: false }) }}
                            originalLabel="Ok"
                            resend={false}
                        />
                    
                }

                <form className="addFriendBar" action="" onSubmit={this.addFriend}>
                    <label htmlFor="nickname">Enter nickname of a friend to start a conversation:</label>
                    <input type="text" id="nickname" placeholder="Enter nickname" value={this.state.nickname} onChange={(e)=>{this.setState({nickname: e.target.value})}} required/>
                    <SubmitButton label="Add" disabled={this.props.disabled} />
                </form>
            </div>
        )
    }
}





export default AddFriendButton