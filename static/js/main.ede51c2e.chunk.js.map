{"version":3,"sources":["firebase.js","SubmitButton.js","translate.js","ChatForm.js","RecentMessages.js","FriendSelector.js","AddFriendButton.js","ChatPage.js","SignInPage.js","LanguageSelector.js","SignUp.js","GuestSignIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SubmitButton","props","type","label","translatorApiKey","translate","text","sender","reciever","nickname","console","log","database","ref","once","then","snapshot","language","val","axios","method","url","responseType","params","key","format","lang","data","translation","join","dbRef","push","set","catch","error","ChatForm","handleSubmit","event","preventDefault","state","handleChange","setState","target","value","action","onSubmit","this","name","id","cols","rows","onChange","disabled","required","Component","RecentMessages","className","messages","map","message","index","FriendSelector","onClick","function","currentTarget","uid","src","imgUrl","alt","deleteFunction","AddFriendButton","addFriend","usersId","openedChats","includes","userNickname","databaseData","arrayPromises","user","userRef","Promise","all","values","filter","conversationArray","conversationData","conversation","length","userId","update","openOption","on","openedChatsData","chat","htmlFor","ChatPage","signOut","auth","select","handle","messagesData","userEmail","chattingWithName","chattingWithUid","off","deleteConversation","indexToDelete","friends","remove","languageToTransalte","result","friend","SignInPage","signIn","signInWithEmailAndPassword","email","password","errorCode","code","errorMessage","LanguageSelector","languages","ui","languageObject","langs","codeLangs","sort","a","b","SignUp","getLanguage","createUser","createUserWithEmailAndPassword","sendEmailVerification","updateProfile","displayName","GuestSignUp","signInGuest","signInAnonymously","guestNumber","App","getLanguageFromSignUp","signedIn","verified","onAuthStateChanged","emailVerified","guestNumberData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ede51c2e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBlKx7tzmawALlymKEkgJZiLdY4IE2VXHg\",\r\n    authDomain: \"translatechat-6c518.firebaseapp.com\",\r\n    databaseURL: \"https://translatechat-6c518.firebaseio.com\",\r\n    projectId: \"translatechat-6c518\",\r\n    storageBucket: \"translatechat-6c518.appspot.com\",\r\n    messagingSenderId: \"187513714020\",\r\n    appId: \"1:187513714020:web:aa171bc1b36018a37d3671\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n","import React from \"react\";\r\n\r\nfunction SubmitButton(props) {\r\n    return (\r\n        <button type=\"submit\">{props.label}</button>\r\n    )\r\n}\r\n\r\nexport default SubmitButton;","import axios from \"axios\";\r\nimport firebase from \"firebase\";\r\n\r\nconst translatorApiKey = \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\";\r\n\r\nfunction translate(text,sender,reciever,nickname) {\r\n\r\n    console.log(\"starts\");\r\n    console.log(text);\r\n    console.log(sender);\r\n    console.log(reciever);\r\n    console.log(nickname);\r\n    console.log(\"ends\");\r\n\r\n    firebase.database().ref(`${reciever}/settings/language`).once(\"value\").then((snapshot)=>{\r\n        \r\n        \r\n\r\n        const language = snapshot.val();\r\n        axios({\r\n            method:\"get\",\r\n            url: \"https://translate.yandex.net/api/v1.5/tr.json/translate\",\r\n            responseType: \"json\",\r\n            params: {\r\n                key: translatorApiKey,\r\n                text: text,\r\n                format: \"plain\",\r\n                lang: language,\r\n            }\r\n        }).then((data) => {\r\n            const translation = data.data.text.join(\"\");\r\n            const dbRef = firebase.database().ref(`${reciever}/chats/${sender}/messages`);\r\n            console.log(`${reciever}/chats/${sender}/messages`)\r\n            dbRef.push(translation);\r\n\r\n            firebase.database().ref(`${reciever}/chats/${sender}/nickname`).set(nickname);\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default translate;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport translate from \"./translate\"\r\n\r\n\r\nclass ChatForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            text:\"\"\r\n        }\r\n    }\r\n    \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref(`${this.props.sender}/chats/${this.props.reciever}/messages`);\r\n        dbRef.push(this.state.text);\r\n        console.log(this.state.text,this.props.sender,this.props.reciever);\r\n        translate(this.state.text,this.props.sender,this.props.reciever,this.props.nickname);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form action=\"\" onSubmit={this.handleSubmit}>\r\n                <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.text} onChange={this.handleChange} disabled={this.props.reciever?false:true} required></textarea>\r\n                <SubmitButton label=\"Send\"/>\r\n            </form>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default ChatForm;","import React from \"react\";\r\n\r\n\r\nfunction RecentMessages(props) {\r\n    return (\r\n        <div className=\"recentMessages\">\r\n            <ul>\r\n                {   \r\n                    props.messages.map((message, index) => {\r\n                        return (\r\n                            <li key={index}>{message}</li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentMessages;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction FriendSelector(props) {\r\n\r\n    const setName = function(event){\r\n        props.function(event.currentTarget.value, event.currentTarget.id);\r\n    }\r\n\r\n    const deleteConversation = (event) => {\r\n       \r\n        props.deleteFunction(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <button onClick={setName} value={props.name} id={props.uid}>\r\n                <img src={props.imgUrl} alt={`A picture of ${props.name}`} />\r\n                <p>{props.name}</p>\r\n            </button>\r\n            <button onClick={deleteConversation} value={props.index}>-</button>\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default FriendSelector;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass AddFriendButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nickname:null,\r\n            openedChats:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n            const friendsReference = firebase.database().ref(`${this.props.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n        \r\n\r\n            friendsReference.on(\"value\", (snapshot) => {\r\n                const openedChats = [];\r\n                const openedChatsData = snapshot.val();\r\n                \r\n                for (let chat in openedChatsData) {\r\n               \r\n                    openedChats.push(openedChatsData[chat].nickname);\r\n                }\r\n                \r\n                this.setState({\r\n                    openedChats:openedChats\r\n                })\r\n\r\n            })\r\n\r\n    }\r\n    \r\n    addFriend = (event) => {\r\n        event.preventDefault()\r\n        const userList = [];\r\n        const usersId = []\r\n\r\n        // Checking if theres no opened conversations opened with that user and that the user isnt trying to start a conversation with itself\r\n        \r\n        if(this.state.openedChats.includes(this.state.nickname) || (this.state.nickname === this.props.userNickname)){\r\n            console.log(\"You already have an opened chat with\", this.state.nickname);\r\n        }else{\r\n\r\n            const databaseRef = firebase.database().ref();\r\n        \r\n            databaseRef.once(\"value\").then((snapshot) => {\r\n                \r\n                const databaseData = snapshot.val()\r\n                const arrayPromises = []\r\n                for (let user in databaseData) {\r\n                    if (user !== \"generalConfig\") {\r\n                        \r\n                        usersId.push(user);\r\n                        const userRef = firebase.database().ref(`${user}/settings/nickname`);\r\n                        arrayPromises.push(userRef.once(\"value\"));\r\n                        \r\n                    }\r\n                }\r\n        \r\n                // Using promise.all to make sure to get all values before doing anything\r\n    \r\n                Promise.all(arrayPromises).then((values) => {\r\n                    values.filter((value, index) => {\r\n                        if (value.val() === this.state.nickname) {\r\n                            console.log(\"found\");\r\n\r\n                            // If found check th other user doesnt have more than 5 conversations\r\n\r\n                            firebase.database().ref(`${usersId[index]}/chats`).once(\"value\").then((snapshot)=>{\r\n                                const conversationArray = [];\r\n                                const conversationData = snapshot.val();\r\n                                for(let conversation in conversationData){\r\n                                    conversationArray.push(conversation);\r\n                                }\r\n                                if(conversationArray.length <=5){\r\n                                    firebase.database().ref(`${this.props.userId}/chats`).update({\r\n                                        [usersId[index]]: {\r\n                                            nickname: this.state.nickname,\r\n                                            messages:\"\"\r\n                                        }\r\n                                    })\r\n            \r\n                                    firebase.database().ref(`${usersId[index]}/chats`).update({\r\n                                        [this.props.userId]: {\r\n                                            nickname: this.props.userNickname,\r\n                                            messages: \"\"\r\n                                        }\r\n                                    })\r\n\r\n                                }else{\r\n                                    console.log(\"friends has already 5 conversations going\");\r\n                                }\r\n                            })\r\n                            \r\n                        }\r\n                    })\r\n                })\r\n        \r\n                \r\n            })\r\n        }\r\n    }\r\n    \r\n    openOption = () => {\r\n        console.log(\"open\");\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        this.setState({\r\n            nickname: event.target.value\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.openOption}>+</button>\r\n                <form action=\"\" onSubmit={this.addFriend}>\r\n                    <label htmlFor=\"nickname\">Enter nickname of friend:</label>\r\n                    <input type=\"text\" id=\"nickname\" value={this.state.nickname} onChange={this.handleChange} />\r\n                    <SubmitButton label=\"Add\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default AddFriendButton","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./firebase\";\r\nimport ChatForm from \"./ChatForm\";\r\nimport RecentMessages from \"./RecentMessages\";\r\nimport FriendSelector from \"./FriendSelector\";\r\nimport AddFriendButton from \"./AddFriendButton\";\r\n\r\n\r\n\r\nclass ChatPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userId: props.userId,\r\n            userNickname: props.name,\r\n            userEmail: null,\r\n            chattingWithName: null,\r\n            chattingWithUid:null,\r\n            languageToTransalte: null,\r\n            friends: [],\r\n            messages: [],\r\n            language: \"\",\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    componentDidMount() {\r\n        \r\n        if (this.state.chattingWithUid !== null) {\r\n\r\n            const languageReference = firebase.database().ref(`${this.state.chattingWithUid}/settings`);\r\n            languageReference.once(\"value\").then((result) => {\r\n                this.setState({\r\n                    language: result.val().language\r\n                })\r\n            })\r\n        }\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n            const friendsReference = firebase.database().ref(`${this.state.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n            friendsReference.on(\"value\", (snapshot) => {\r\n                \r\n                const openedChatsData = snapshot.val();\r\n                const openedChats = [];\r\n                \r\n                for (let chat in openedChatsData) {\r\n                    console.log(openedChatsData[chat])\r\n                    openedChats.push({ uid: chat, name: openedChatsData[chat].nickname, });\r\n                }\r\n\r\n                \r\n\r\n                // Rendering informaion on page\r\n                this.setState({\r\n                    friends: openedChats\r\n                })\r\n\r\n            })\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    signOut = () => {\r\n    firebase.auth().signOut();\r\n    }\r\n    \r\n    // Getting the messages between the user and the selected other user.\r\n    select = (name,uid) => {\r\n\r\n        const handle = snapshot => {\r\n            \r\n            const messages = [];\r\n            const messagesData = snapshot.val();\r\n            if(messagesData != null){\r\n                if (!messagesData.length) {\r\n                    for (let message in messagesData) {\r\n                    \r\n                        messages.push(messagesData[message]);\r\n                    } \r\n                } else {\r\n                    messages.push(messagesData);\r\n                }\r\n\r\n            }\r\n            \r\n\r\n            this.setState({\r\n                userId: this.props.userId,\r\n                userEmail: this.props.userEmail,\r\n                messages: messages,\r\n                chattingWithName: name,\r\n                chattingWithUid: uid,\r\n                language:\"\",\r\n            })\r\n        }\r\n        console.log(`${this.state.userId}/${uid}`);\r\n        const dbRef = firebase.database().ref(`${this.state.userId}/chats/${uid}/messages`);\r\n        dbRef.off(\"value\", handle);\r\n        dbRef.on(\"value\", handle);\r\n\r\n    }\r\n\r\n    deleteConversation = (indexToDelete) => {\r\n        \r\n        firebase.database().ref(`${this.state.userId}/chats/${this.state.friends[indexToDelete].uid}`).remove().then(()=>{\r\n            console.log(\"deleted\");\r\n        });\r\n\r\n        firebase.database().ref(`${this.state.friends[indexToDelete].uid}/chats/${this.state.userId}`).remove().then(()=>{\r\n            console.log(\"deleted\");\r\n        });\r\n    }\r\n        \r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.signOut}>Sign Out</button>\r\n                <h2>{this.state.chattingWithName\r\n                ?\r\n                `${this.props.name} chatting with ${this.state.chattingWithName}`\r\n                :\r\n                `Hi ${this.props.name}! Start chatting without worrying about language barrier! `}</h2>\r\n                <div>\r\n\r\n                    {/* Only show the add conversation(friend) button if there are less than 5 active conversations */}\r\n                    {this.state.friends.length <= 5\r\n                        ?\r\n                        <AddFriendButton userId={this.state.userId} userNickname={this.state.userNickname} />\r\n                        :\r\n                        null\r\n                     }\r\n                    \r\n                    <ul>\r\n                        {this.state.friends.map((friend, index) => {\r\n                            return (\r\n                                <FriendSelector key={index} uid={friend.uid} name={friend.name} imgUrl={friend.imgUrl ? friend.imgUrl : \"none\"} userNickname={this.state.userNickname} function={this.select} index={index} deleteFunction={this.deleteConversation}/>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                    <div>\r\n                        <RecentMessages messages={this.state.messages} />\r\n                        <p>{this.props.language}</p>\r\n                        <ChatForm language={this.state.language} sender={this.state.userId} reciever={this.state.chattingWithUid} nickname={this.state.userNickname}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatPage;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\nclass SignInPage extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id]:event.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n    signIn = (event) => {\r\n        event.preventDefault();\r\n        \r\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((result) => {\r\n            \r\n            \r\n        }).catch(function (error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode);\r\n            console.log(errorMessage);\r\n            // ...\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <form action=\"\" onSubmit={this.signIn}>\r\n                <h2>Sign In</h2>\r\n                <label htmlFor=\"email\">Enter email</label>\r\n                <input type=\"text\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                <label htmlFor=\"password\">Enter password</label>\r\n                <input type=\"text\" id=\"password\" onChange={this.handleChange} value={this.state.password} required/>\r\n                <SubmitButton label=\"Sign in\"/>\r\n            </form>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport default SignInPage;","import React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass LanguageSelector extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            languages: [],\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            method: \"get\",\r\n            url: \"https://translate.yandex.net/api/v1.5/tr.json/getLangs\",\r\n            responseType: \"json\",\r\n            params: {\r\n                key: \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\",\r\n                ui: \"en\"\r\n                // text: text,\r\n                // format: \"plain\",\r\n                // lang: language,\r\n            }\r\n        }).then((data) => {\r\n            // const translation = data.data.text.join(\"\");\r\n            // const dbRef = firebase.database().ref(`Carlos/${user}`);\r\n            // dbRef.push(translation);\r\n            \r\n            const languageObject = data.data.langs;\r\n            let languages = [];\r\n            let codeLangs = [];\r\n            for (let lang in languageObject) {\r\n                languages.push({\r\n                    name: languageObject[lang],\r\n                    code: lang\r\n                })\r\n                \r\n            }\r\n            languages = languages.sort();\r\n            codeLangs = codeLangs.sort();\r\n\r\n            languages = languages.sort(function (a, b) {\r\n                return ((a.name < b.name) ? -1 : ((a.name == b.name) ? 0 : 1));\r\n            });\r\n            this.setState({\r\n                languages: languages,\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            <label htmlFor=\"language\">Select your language</label>\r\n                <select name=\"language\" id=\"language\" onChange={this.props.function} required>\r\n                {this.state.languages.map((language) => {\r\n                    return <option id={language.name} value={language.code}>{language.name}</option>\r\n                })}\r\n            </select>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default LanguageSelector;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\n\r\n\r\nclass SignUp extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"\"\r\n        }\r\n    }\r\n\r\n    getLanguage = (event) => {\r\n        console.log(event.target.value);\r\n        this.setState({\r\n            language: event.target.value\r\n        })\r\n    }\r\n\r\n    createUser = (event) => {\r\n        event.preventDefault();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((result) => {\r\n\r\n            // make sure the user can not start with guest if using nickname to store chats\r\n\r\n            const data = {\r\n                \r\n                    \"chats\": false,\r\n                    \"settings\": {\r\n                        \"language\": this.state.language,\r\n                        \"nickname\": this.state.name,\r\n                        \"email\": this.state.email,\r\n                    }\r\n                \r\n            }\r\n\r\n            firebase.database().ref(`${result.user.uid}`).update(data);\r\n\r\n            result.user.sendEmailVerification().then(function () {\r\n                // Email sent.\r\n                \r\n            }).catch(function (error) {\r\n                // An error happened.\r\n                console.log(error);\r\n            });\r\n\r\n            \r\n\r\n            \r\n            \r\n            // result.user.language = this.state.language;\r\n\r\n            result.user.updateProfile({\r\n                displayName: this.state.name,\r\n                language:this.state.language\r\n            })\r\n\r\n            // firebase.database().ref(`user.user.uid/`).update(data);\r\n            \r\n\r\n\r\n        }).catch(function (error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorMessage);\r\n            // ...\r\n        });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form action=\"\" onSubmit={this.createUser}>\r\n                <h2>Sign up</h2>\r\n                <label htmlFor=\"name\">Enter name</label>\r\n                <input type=\"text\" id=\"name\" onChange={this.handleChange} value={this.state.name} required />\r\n                <label htmlFor=\"email\">Enter email</label>\r\n                <input type=\"text\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                <label htmlFor=\"password\">Enter password</label>\r\n                <input type=\"text\" id=\"password\" onChange={this.handleChange} value={this.state.password} required />\r\n                <LanguageSelector function={this.getLanguage} />\r\n                {/* <p>{this.state.language}</p>\r\n                <p>{this.state.name}</p>\r\n                <p>{this.state.email}</p> */}\r\n                <SubmitButton label=\"Sign up\" />\r\n            </form>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\"\r\n\r\n\r\nclass GuestSignUp extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"\",\r\n            userId: \"\"\r\n        }\r\n    }\r\n\r\n    signInGuest = (event) => {\r\n        event.preventDefault();\r\n\r\n        // firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\r\n        //     .then(() => {\r\n                // Existing and future Auth states are now persisted in the current\r\n                // session only. Closing the window would clear any existing state even\r\n                // if a user forgets to sign out.\r\n                // ...\r\n                // New sign-in will be persisted with session persistence.\r\n                return firebase.auth().signInAnonymously().then((data) => {\r\n                    \r\n                    const userId = data.user.uid;\r\n\r\n                    const guestNumberData = firebase.database().ref(\"/generalConfig\");\r\n                    guestNumberData.once(\"value\").then((value) => {\r\n                        this.setState({\r\n                            \r\n                            userId: userId,\r\n                         \r\n                        })\r\n\r\n                        console.log(value.val().guestNumber);\r\n                  \r\n                        \r\n                        const data = {\r\n\r\n                            \"chats\": false,\r\n                            \"settings\": {\r\n                                \"language\": this.state.language,\r\n                                \"nickname\": `guest${value.val().guestNumber}`,\r\n                                \"email\": null,\r\n                                \"isGuest\": true\r\n                            }\r\n\r\n                        }\r\n\r\n                        firebase.database().ref(`${userId}`).update(data);\r\n\r\n                        \r\n\r\n                    })\r\n\r\n\r\n                }).catch(function (error) {\r\n                    // Handle Errors here.\r\n                    var errorCode = error.code;\r\n                    var errorMessage = error.message;\r\n                    console.log(errorMessage);\r\n                    // ...\r\n                });\r\n            // })\r\n            // .catch(function (error) {\r\n            //     // Handle Errors here.\r\n            //     var errorCode = error.code;\r\n            //     var errorMessage = error.message;\r\n            // });\r\n\r\n\r\n        \r\n\r\n       \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    getLanguage = (event) => {\r\n        console.log(event.target.value);\r\n        this.setState({\r\n            language: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form action=\"\" onSubmit={this.signInGuest}>\r\n                <h2>Sign up Guest</h2>\r\n                {/* <label htmlFor=\"name\">Enter name</label>\r\n                <input type=\"text\" id=\"name\" onChange={this.handleChange} value={this.state.name} required />\r\n                <label htmlFor=\"email\">Enter email</label>\r\n                <input type=\"text\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                <label htmlFor=\"password\">Enter password</label>\r\n                <input type=\"text\" id=\"password\" onChange={this.handleChange} value={this.state.password} required /> */}\r\n                <LanguageSelector function={this.getLanguage} />\r\n                {/* <p>{this.state.language}</p>\r\n                <p>{this.state.name}</p>\r\n                <p>{this.state.email}</p> */}\r\n                <SubmitButton label=\"Sign up\" />\r\n                \r\n            </form>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default GuestSignUp;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase\";\nimport ChatPage from \"./ChatPage\";\nimport SignInPage from \"./SignInPage\";\nimport SignUp from './SignUp';\nimport GuestSignUp from './GuestSignIn';\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      signedIn: false,\n      userId: null,\n      userEmail: null,\n      name: null,\n      language: null,\n      verified: null\n    }\n  }\n\n  \n\n  componentDidMount() {\n    \n    firebase.auth().onAuthStateChanged((user) => {\n      if (user && user.emailVerified) {\n        \n        this.setState({\n          signedIn: true,\n          userId: user.uid,\n          name: user.displayName,\n          email: user.email,\n          language: \"\"\n        })\n        \n\n        // In case the user sign in as guest\n      } else if (user && user.email === null) {\n        const guestNumberData = firebase.database().ref(\"/generalConfig\");\n        \n        guestNumberData.once(\"value\").then((snapshot) => {\n          this.setState({\n            signedIn: true,\n            userId: user.uid,\n            email: null,\n            name: `guest${snapshot.val().guestNumber}`\n          })\n\n          guestNumberData.update({\n            guestNumber: snapshot.val().guestNumber + 1\n          });           \n          \n        });\n        \n      } else {\n        // console.log(user);\n        this.setState({\n          signedIn: false,\n          userId: null\n        })\n      }\n    })\n  }\n\n  getLanguageFromSignUp = (language) => {\n    this.setState({\n      language: language\n    })\n  }\n\n  render() {\n\n    return (\n      \n      <div>\n        {this.state.signedIn\n          ?\n          \n          <ChatPage userId={this.state.userId} name={this.state.name} language={this.state.language}/>\n          :\n          <div>\n            <GuestSignUp/>\n            <SignUp function={this.getLanguageFromSignUp} />\n            <SignInPage />\n          </div>\n         }\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}