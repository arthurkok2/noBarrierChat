{"version":3,"sources":["noImage.png","firebase.js","SubmitButton.js","translate.js","GiphsSearch.js","GiphyComponent.js","ChatForm.js","RecentMessages.js","FriendSelector.js","AlertMessage.js","AddFriendButton.js","ChatPage.js","SignInPage.js","LanguageSelector.js","SignUp.js","GuestSignIn.js","Header.js","Footer.js","SettingsPage.js","Introduction.js","GoogleSignIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SubmitButton","props","disabled","className","type","label","translatorApiKey","translate","text","sender","reciever","nickname","database","ref","once","then","snapshot","language","val","axios","method","url","responseType","params","key","format","lang","data","translation","join","dbRef","translatedMessage","Date","now","toString","split","splice","push","set","GiphSearch","search","e","preventDefault","api_key","q","state","query","gifs","randomNumber","Math","floor","random","resultsToReturn","slice","setState","gifsArray","sendGif","gifUrl","currentTarget","value","altTag","id","message","closeGiphy","action","onSubmit","this","htmlFor","onChange","target","map","gif","index","images","downsized","title","onClick","src","alt","Component","GiphyComponent","toggleGiphySearch","giphyOpen","chatting","aria-hidden","ChatForm","handleSubmit","event","name","cols","rows","placeholder","required","RecentMessages","chattingWith","noImage","messages","time","FriendSelector","function","uid","imgUrl","deleteFunction","AlertMessage","functionToClose","originalLabel","aditionalButton","aditionalFunction","aditionalLabel","AddFriendButton","addFriend","usersId","openedChats","includes","userNickname","errorMessage","error","databaseData","arrayPromises","user","userRef","Promise","all","values","found","forEach","conversationArray","conversationData","conversation","length","userId","update","on","openedChatsData","chat","resend","ChatPage","select","handle","messagesData","userEmail","chattingWithName","chattingWithUid","recentMessages","document","querySelector","scrollTo","top","scrollHeight","left","behavior","off","scrollIntoView","deleteConversation","friends","messageToDelete","remove","deleteConfirmation","languageToTransalte","userImg","result","aria-label","friend","SignInPage","handleChange","signIn","functionToCall","signInAlert","email","password","auth","signInWithEmailAndPassword","userUid","getLanguage","catch","recoverPassword","sendPasswordResetEmail","emailToRecover","emailSent","googleSignIn","functionToGetUserIsNew","userIsNewFunction","provider","GoogleAuthProvider","signInWithPopup","isUserNew","additionalUserInfo","isNewUser","forgetPassword","google","LanguageSelector","defaultValue","languages","code","SignUp","createUser","functionToCallAlert","signUpAlert","toLowerCase","substring","item","createUserWithEmailAndPassword","sendEmailVerification","updateProfile","displayName","signedUp","maxLength","minLength","GuestSignUp","signInGuest","isLoading","setPersistence","Auth","Persistence","NONE","signInAnonymously","guestNumber","setTimeout","signOut","Header","signedIn","onClickFunction","Footer","SettingsPage","languagesSelection","applyChange","currentLanguage","filter","languageObject","closeSettings","Introduction","GoogleSignIn","setupNicknameAndLanguage","googleNicknameAlertFunction","nicknameFirstFiveLetters","currentUser","updateNicknameFunction","updateNickname","window","location","reload","App","verified","optionSelected","languagesList","settingsStatus","verifyAlert","introduction","nicknameAlert","userIsNew","onAuthStateChanged","emailVerified","isAnonymous","guestNumberData","ui","langs","sort","a","b","Fragment","friendsVisible","trueOrFalse","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,qC,0OCgB3CC,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,E,iBCVeS,MANf,SAAsBC,GAClB,OACI,4BAAQC,SAAUD,EAAMC,SAAUC,UAAU,eAAeC,KAAK,UAAUH,EAAMI,Q,gBCDlFC,EAAmB,uFAwCVC,MApCf,SAAmBC,EAAKC,EAAOC,EAASC,GAEpCpB,IAASqB,WAAWC,IAApB,UAA2BH,EAA3B,uBAAyDI,KAAK,SAASC,MAAK,SAACC,GAEzE,IAAMC,EAAWD,EAASE,MAE1BC,IAAM,CACFC,OAAO,MACPC,IAAK,0DACLC,aAAc,OACdC,OAAQ,CACJC,IAAKlB,EACLE,KAAMA,EACNiB,OAAQ,QACRC,KAAMT,KAEXF,MAAK,SAACY,GACL,IAAMC,EAAcD,EAAKA,KAAKnB,KAAKqB,KAAK,IAClCC,EAAQvC,IAASqB,WAAWC,IAApB,UAA2BH,EAA3B,kBAA6CD,EAA7C,cACRsB,EAAoB,CACtB,QAAWH,EACX,KAAQ,WACR,KAAQI,KAAKA,KAAKC,MAAMC,YAAYC,MAAM,QAAQC,OAAO,EAAG,GAC5D,OAAW,QAEfN,EAAMO,KAAKN,GAGXxC,IAASqB,WAAWC,IAApB,UAA2BH,EAA3B,kBAA6CD,EAA7C,cAAgE6B,IAAI3B,UCwGjE4B,E,YAnIX,aAAe,IAAD,8BACV,+CAmCJC,OAAS,SAACC,GACNA,EAAEC,iBAIFvB,IAAM,CACFE,IAAI,iCACJC,aAAa,OACbF,OAAO,MACPG,OAAQ,CACJoB,QAAS,mCACTC,EAAG,EAAKC,MAAMC,SAEnB/B,MAAK,SAACgC,GACL,IAAMC,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC/BC,EAAkBL,EAAKpB,KAAKA,KAAK0B,MAAML,EAAcA,EAAe,GAC1E,EAAKM,SAAS,CACVC,UAAWH,QArDT,EA6DdI,QAAS,SAACf,GACN,IAAMgB,EAAShB,EAAEiB,cAAcC,MACzBC,EAASnB,EAAEiB,cAAcG,GAI3B/B,EAAQvC,IAASqB,WAAWC,IAApB,UAA2B,EAAKZ,MAAMQ,OAAtC,kBAAsD,EAAKR,MAAMS,SAAjE,cAERoD,EAAU,CACV,QAAWL,EACX,KAAQ,OACR,KAAQzB,KAAKA,KAAKC,MAAMC,YAAYC,MAAM,QAAQC,OAAO,EAAG,GAC5D,OAAU,MACV,OAAWwB,GAKf9B,EAAMO,KAAKyB,GAIXhC,EAAQvC,IAASqB,WAAWC,IAApB,UAA2B,EAAKZ,MAAMS,SAAtC,kBAAwD,EAAKT,MAAMQ,OAAnE,cAERqD,EAAU,CACN,QAAWL,EACX,KAAQ,WACR,KAAQzB,KAAKA,KAAKC,MAAMC,YAAYC,MAAM,QAAQC,OAAO,EAAG,GAC5D,OAAU,MACV,OAAWwB,GAKf9B,EAAMO,KAAKyB,GAIX,EAAK7D,MAAM8D,cAjGX,EAAKlB,MAAQ,CACTU,UAAW,GACXT,MAAM,IAJA,E,iFAUO,IAAD,OAChB3B,IAAM,CAEFE,IAAK,mCACLC,aAAa,OACbF,OAAO,MACPG,OAAQ,CACJoB,QAAS,sCAGd5B,MAAK,SAACgC,GAEL,IAAMC,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC/BC,EAAkBL,EAAKpB,KAAKA,KAAK0B,MAAML,EAAcA,EAAe,GAI1E,EAAKM,SAAS,CACVC,UAAUH,S,+BA6EZ,IAAD,OACL,OACI,yBAAKjD,UAAU,aACX,0BAAM6D,OAAO,GAAGC,SAAUC,KAAK1B,QAC3B,2BAAO2B,QAAQ,kBAAf,qBACA,2BAAO/D,KAAK,OAAOyD,GAAG,iBAAiBF,MAAOO,KAAKrB,MAAMC,MAAOsB,SAAU,SAAC3B,GAAO,EAAKa,SAAS,CAACR,MAAOL,EAAE4B,OAAOV,WACjH,kBAAC,EAAD,CAActD,MAAM,YAExB,6BAIK6D,KAAKrB,MAAMU,UAAUe,KAAI,SAACC,EAAKC,GAC5B,OACI,4BAAQhD,IAAKgD,EAAOrE,UAAU,MAAMwD,MAAOY,EAAIE,OAAOC,UAAUrD,IAAKwC,GAAIU,EAAII,MAAOC,QAAS,EAAKpB,SAC9F,yBAAKqB,IAAKN,EAAIE,OAAOC,UAAUrD,IAAKyD,IAAKP,EAAII,kB,GAzHpDI,aCsCVC,E,YAtCX,aAAe,IAAD,8BACV,+CASJC,kBAAoB,WAChB,EAAK3B,SAAS,CACV4B,WAAY,EAAKrC,MAAMqC,aAV3B,EAAKrC,MAAQ,CACTqC,WAAW,GAHL,E,sEAmBV,OACI,yBAAK/E,UAAU,YACX,4BAAQD,UAAUgE,KAAKjE,MAAMkF,SAAyBP,QAASV,KAAKe,mBAApE,WAA+F,uBAAG9E,UAAU,eAAeiF,eAAa,KAIvIlB,KAAKrB,MAAMqC,WAAahB,KAAKjE,MAAMkF,SAEhC,kBAAC,EAAD,CAAYpB,WAAYG,KAAKe,kBAAmBxE,OAAQyD,KAAKjE,MAAMQ,OAAQC,SAAUwD,KAAKjE,MAAMS,WAEhG,Q,GA/BSqE,aC4DdM,E,YAzDX,aAAe,IAAD,8BACV,+CAQJC,aAAe,SAACC,GACZA,EAAM7C,iBAEN,IAAMZ,EAAQvC,IAASqB,WAAWC,IAApB,UAA2B,EAAKZ,MAAMQ,OAAtC,kBAAsD,EAAKR,MAAMS,SAAjE,cAERoD,EAAU,CACZ,QAAW,EAAKjB,MAAMrC,KACtB,KAAQ,OACR,KAAQwB,KAAKA,KAAKC,MAAMC,YAAYC,MAAM,QAAQC,OAAO,EAAG,GAC5D,OAAW,QAEfN,EAAMO,KAAKyB,GAIXvD,EAAU,EAAKsC,MAAMrC,KAAK,EAAKP,MAAMQ,OAAO,EAAKR,MAAMS,SAAS,EAAKT,MAAMU,UAE3E,EAAK2C,SAAS,CACV9C,KAAK,MAzBT,EAAKqC,MAAQ,CACTrC,KAAK,IAHC,E,sEAkCJ,IAAD,OACL,OACI,yBAAKL,UAAU,eAIX,kBAAC,EAAD,CAAgBM,OAAQyD,KAAKjE,MAAMQ,OAAQC,SAAUwD,KAAKjE,MAAMS,SAAUyE,SAAUjB,KAAKjE,MAAMkF,WAI/F,0BAAMhF,UAAU,WAAW6D,OAAO,GAAGC,SAAUC,KAAKoB,cAChD,8BAAUE,KAAK,GAAG3B,GAAG,GAAG4B,KAAK,KAAKC,KAAK,KAAK/B,MAAOO,KAAKrB,MAAMrC,KAAM4D,SAAU,SAAC3B,GAAK,EAAKa,SAAS,CAAC9C,KAAKiC,EAAE4B,OAAOV,SAAUzD,UAAUgE,KAAKjE,MAAMS,SAAyBiF,YAAazB,KAAKjE,MAAMS,SAAW,qBAAuB,6BAA8BkF,UAAQ,IACzQ,kBAAC,EAAD,CAAc1F,UAAUgE,KAAKjE,MAAMS,SAAyBL,MAAM,e,GA/C/D0E,a,iBCoCRc,MAvCf,SAAwB5F,GACpB,OACI,yBAAK4D,GAAG,iBAAiB1D,UAAU,qBAC/B,yBAAKA,UAAU,cAIVF,EAAM6F,cAAgB,yBAAKjB,IAAKkB,IAASjB,IAAI,gCAI7C7E,EAAM6F,aAAe,4BAAK7F,EAAM6F,cAAqB,wFAG1D,wBAAI3F,UAAU,kBAKNF,EAAM+F,SAAS1B,KAAI,SAACR,EAASU,GACzB,OACI,wBAAIhD,IAAKgD,EAAOrE,UAAW2D,EAAQ1D,MAC/B,uBAAGD,UAAU,QAAQ2D,EAAQmC,MACT,SAAnBnC,EAAQrC,OAEL,uBAAGtB,UAAU,WAAW2D,EAAQA,SAEhC,yBAAKe,IAAKf,EAAQA,QAASgB,IAAKhB,EAAQF,gBCE7DsC,MA5Bf,SAAwBjG,GAWpB,OACI,wBAAIE,UAAU,gBACV,4BAAQyE,QATA,SAASW,GACrBtF,EAAMkG,SAASZ,EAAM7B,cAAcC,MAAO4B,EAAM7B,cAAcG,KAQhCF,MAAO1D,EAAMuF,KAAM3B,GAAI5D,EAAMmG,KAClDnG,EAAMoG,OAEH,yBAAKxB,IAAK5E,EAAMoG,OAAQvB,IAAG,uBAAkB7E,EAAMuF,QAEvD,yBAAKX,IAAKkB,IAASjB,IAAG,4BAEtB,2BAAI7E,EAAMuF,OAEd,4BAAQrF,UAAU,eAAeyE,QAAS3E,EAAMqG,eAAgB3C,MAAO1D,EAAMuE,OAAO,uBAAGrE,UAAU,wB,QCR9FoG,MAjBf,SAAsBtG,GAElB,OACI,yBAAKE,UAAU,SACX,4BAAKF,EAAM0E,OACX,2BAAI1E,EAAM6D,SACV,6BACI,4BAAQc,QAAS,WAAQ3E,EAAMuG,oBAAsBvG,EAAMwG,eAI1DxG,EAAMyG,gBAAkB,4BAAQ9B,QAAS3E,EAAM0G,mBAAoB1G,EAAM2G,gBAA2B,MC2KtGC,E,YAjLX,aAAe,IAAD,8BACV,+CAwCJC,UAAY,SAACvB,GACTA,EAAM7C,iBAEN,IAAMqE,EAAU,GAIb,EAAKlE,MAAMmE,YAAYC,SAAS,EAAKpE,MAAMlC,WAAc,EAAKkC,MAAMlC,WAAa,EAAKV,MAAMiH,aAG3F,EAAK5D,SAAS,CACV6D,aAAa,wCAAD,OAA0C,EAAKtE,MAAMlC,SAArD,4CACZyG,OAAO,IAOS7H,EAASqB,WAAWC,MAE5BC,KAAK,SAASC,MAAK,SAACC,GAE5B,IAAMqG,EAAerG,EAASE,MAIxBoG,EAAgB,GAItB,IAAK,IAAIC,KAAQF,EACb,GAAa,kBAATE,EAA0B,CAE1BR,EAAQ1E,KAAKkF,GACb,IAAMC,EAAUjI,EAASqB,WAAWC,IAApB,UAA2B0G,EAA3B,uBAChBD,EAAcjF,KAAKmF,EAAQ1G,KAAK,UAOxC2G,QAAQC,IAAIJ,GAAevG,MAAK,SAAC4G,GAC7B,IAAIC,GAAQ,EACZD,EAAOE,SAAQ,SAAClE,EAAOa,GAEfb,EAAMzC,QAAU,EAAK2B,MAAMlC,UAC3BiH,GAAQ,EAIRrI,EAASqB,WAAWC,IAApB,UAA2BkG,EAAQvC,GAAnC,WAAmD1D,KAAK,SAASC,MAAK,SAACC,GACnE,IAAM8G,EAAoB,GACpBC,EAAmB/G,EAASE,MAClC,IAAI,IAAI8G,KAAgBD,EACpBD,EAAkBzF,KAAK2F,GAKxBF,EAAkBG,OAAS,GAC1B1I,EAASqB,WAAWC,IAApB,UAA2B,EAAKZ,MAAMiI,OAAtC,WAAsDC,OAAtD,eACKpB,EAAQvC,GAAS,CACd7D,SAAU,EAAKkC,MAAMlC,SACrBqF,SAAS,MAIjBzG,EAASqB,WAAWC,IAApB,UAA2BkG,EAAQvC,GAAnC,WAAmD2D,OAAnD,eACK,EAAKlI,MAAMiI,OAAS,CACjBvH,SAAU,EAAKV,MAAMiH,aACrBlB,SAAU,OAKlB,EAAK1C,SAAS,CACV6D,aAAc,uEACdC,OAAO,QAKZ5C,IAAWmD,EAAOM,OAAS,GAAOL,GAIzC,EAAKtE,SAAS,CACV6D,aAAa,cAAD,OAAgB,EAAKtE,MAAMlC,SAA3B,qCACZyG,OAAO,cAjI/B,EAAKvE,MAAQ,CACTlC,SAAS,GACTqG,YAAa,GACbI,OAAO,EACPD,aAAa,IANP,E,iFAaO,IAAD,OAGS5H,EAASqB,WAAWC,IAApB,UAA2BqD,KAAKjE,MAAMiI,OAAtC,WAIRE,GAAG,SAAS,SAACpH,GAC1B,IAAMgG,EAAc,GACdqB,EAAkBrH,EAASE,MAEjC,IAAK,IAAIoH,KAAQD,EAEbrB,EAAY3E,KAAKgG,EAAgBC,GAAM3H,UAK3C,EAAK2C,SAAS,CACV0D,YAAYA,S,+BA+Gd,IAAD,OACL,OACI,6BAKQ9C,KAAKrB,MAAMuE,OAGP,kBAAC,EAAD,CACIzC,MAAM,4BACNb,QAASI,KAAKrB,MAAMsE,aACpBX,gBAAiB,WAAQ,EAAKlD,SAAS,CAAE8D,OAAO,KAChDX,cAAc,KACd8B,QAAQ,IAKpB,0BAAMpI,UAAU,eAAe6D,OAAO,GAAGC,SAAUC,KAAK4C,WACpD,2BAAO3C,QAAQ,YAAf,uDACA,2BAAO/D,KAAK,OAAOyD,GAAG,WAAW8B,YAAY,iBAAiBhC,MAAOO,KAAKrB,MAAMlC,SAAUyD,SAAU,SAAC3B,GAAK,EAAKa,SAAS,CAAC3C,SAAU8B,EAAE4B,OAAOV,SAAUiC,UAAQ,IAC9J,kBAAC,EAAD,CAAcvF,MAAM,MAAMH,SAAUgE,KAAKjE,MAAMC,iB,GAvKrC6E,aC0PfyD,E,YApPX,WAAYvI,GAAQ,IAAD,8BACf,4CAAMA,KA6EVwI,OAAS,SAACjD,EAAKY,GAEX,IAAMsC,EAAS,SAAA1H,GAEX,IAAIgF,EAAW,GACT2C,EAAe3H,EAASE,MAC9B,GAAmB,MAAhByH,EAAqB,CACpB,GAAKA,EAAaV,OAMdjC,EAAS3D,KAAKsG,QALd,IAAK,IAAI7E,KAAW6E,EAEhB3C,EAAS3D,KAAKsG,EAAa7E,IAO/BkC,EAASiC,OAAS,KAClBjC,EAAWA,EAAS3C,MAAM2C,EAASiC,OAAS,GAAIjC,EAASiC,SAIjE,EAAK3E,SAAS,CACV4E,OAAQ,EAAKjI,MAAMiI,OACnBU,UAAW,EAAK3I,MAAM2I,UACtB5C,SAAUA,EACV6C,iBAAkBrD,EAClBsD,gBAAiB1C,EACjBnF,SAAS,KAKb,IAAM8H,EAAiBC,SAASC,cAAc,mBAC9CF,EAAeG,SAAS,CACpBC,IAAKJ,EAAeK,aACpBC,KAAM,EACNC,SAAU,YAKZxH,EAAQvC,EAASqB,WAAWC,IAApB,UAA2B,EAAKgC,MAAMqF,OAAtC,kBAAsD9B,EAAtD,cACdtE,EAAMyH,IAAI,QAASb,GACnB5G,EAAMsG,GAAG,QAASM,GAIlBM,SAASC,cAAc,mBAAmBO,eAAe,CAACF,SAAS,YA9HpD,EAkInBG,mBAAqB,WACjB,IAAMX,EAAkB,EAAKjG,MAAM6G,QAAQ,EAAK7G,MAAM8G,iBAAiBvD,IAIvE7G,EAASqB,WAAWC,IAApB,UAA2B,EAAKgC,MAAMqF,OAAtC,kBAAsDY,IAAmBc,SAAS7I,MAAK,eAKvFxB,EAASqB,WAAWC,IAApB,UAA2BiI,EAA3B,kBAAoD,EAAKjG,MAAMqF,SAAU0B,SAAS7I,MAAK,eAMnF+H,IAAoB,EAAKjG,MAAMiG,gBAC/B,EAAKxF,SAAS,CACVuF,iBAAkB,KAClBC,gBAAiB,KACjBe,oBAAoB,IAIxB,EAAKvG,SAAS,CACVuG,oBAAoB,KAzJ5B,EAAKhH,MAAQ,CACTqF,OAAQjI,EAAMiI,OACdhB,aAAcjH,EAAMuF,KACpBoD,UAAW,KACXC,iBAAkB,KAClBC,gBAAgB,KAChBgB,oBAAqB,KACrBJ,QAAS,GACT1D,SAAU,GACV/E,SAAU,GACV8I,QAAS,KACTF,oBAAmB,EACnBF,gBAAiB,MAdN,E,iFAoBE,IAAD,OAImB,OAA/BzF,KAAKrB,MAAMiG,iBAEevJ,EAASqB,WAAWC,IAApB,UAA2BqD,KAAKrB,MAAMiG,gBAAtC,cACRhI,KAAK,SAASC,MAAK,SAACiJ,GAClC,EAAK1G,SAAS,CACVrC,SAAU+I,EAAO9I,MAAMD,cAMV1B,EAASqB,WAAWC,IAApB,UAA2BqD,KAAKrB,MAAMqF,OAAtC,WAIRE,GAAG,SAAS,SAACpH,GAE1B,IAAMqH,EAAkBrH,EAASE,MAC3B8F,EAAc,GAEpB,IAAK,IAAIsB,KAAQD,EAEbrB,EAAY3E,KAAK,CAAE+D,IAAKkC,EAAM9C,KAAM6C,EAAgBC,GAAM3H,WAK9D,IAAIiH,GAAQ,EAEZZ,EAAYa,SAAQ,SAACS,GACbA,EAAKlC,MAAQ,EAAKvD,MAAMiG,kBACxBlB,GAAQ,MAIZA,EAEA,EAAKtE,SAAS,CACVoG,QAAS1C,IAIb,EAAK1D,SAAS,CACVoG,QAAS1C,EACT6B,iBAAkB,KAClBC,gBAAiB,Y,+BA4FvB,IAAD,OACL,OACI,yBAAK3I,UAAU,WAEX,yBAAKA,UAAU,qBAKP+D,KAAKrB,MAAMgH,oBAGP,kBAAC,EAAD,CACIlF,MAAM,oCAAoC6B,gBAAiB,WACvD,EAAKlD,SAAS,CACVuG,oBAAmB,KAG3B/F,QAAQ,qDACR2C,cAAe,uBAAGtG,UAAU,sCAAsC8J,aAAW,uBAC7EvD,iBAAiB,EACjBC,kBAAmBzC,KAAKuF,mBACxB7C,eAAgB,uBAAGzG,UAAU,6BAA6B8J,aAAW,4BAQjF,yBAAK9J,UAAU,iBAIV+D,KAAKrB,MAAM6G,QAAQzB,OAAS,GAEzB,kBAAC,EAAD,CAAiB/H,UAAUgE,KAAKrB,MAAMqE,aAA6BgB,OAAQhE,KAAKrB,MAAMqF,OAAQhB,aAAchD,KAAKrB,MAAMqE,eAG3H,4BACKhD,KAAKrB,MAAM6G,QAAQpF,KAAI,SAAC4F,EAAQ1F,GAC7B,OACI,kBAAC,EAAD,CACIhD,IAAK0I,EAAO9D,IACZA,IAAK8D,EAAO9D,IACZZ,KAAM0E,EAAO1E,KACba,OAAQ6D,EAAO7D,OAAS6D,EAAO7D,OAAS,KACxCa,aAAc,EAAKrE,MAAMqE,aACzBf,SAAU,EAAKsC,OACfjE,MAAOA,EACP8B,eAAgB,SAAC7D,GACb,EAAKa,SAAS,CACdqG,gBAAgBlH,EAAEiB,cAAcC,MAC5BkG,oBAAoB,YAShD,yBAAK1J,UAAU,4BACX,6BACI,yCAAe,8BAAO+D,KAAKjE,MAAMuF,MAAjC,KACA,sCAAW,0BAAMrF,UAAU,QAAhB,gBAAX,8CAGJ,kBAAC,EAAD,CAAgB6F,SAAU9B,KAAKrB,MAAMmD,SAAUF,aAAc5B,KAAKrB,MAAMgG,iBAAkBkB,QAAS7F,KAAKrB,MAAMkH,UAC9G,kBAAC,EAAD,CACI9I,SAAUiD,KAAKrB,MAAM5B,SACrBR,OAAQyD,KAAKrB,MAAMqF,OACnBxH,SAAUwD,KAAKrB,MAAMiG,gBACrBnI,SAAUuD,KAAKrB,MAAMqE,aACrB/B,WAAUjB,KAAKrB,MAAMgG,0B,GA5O1B9D,aCkIRoF,E,YArIX,aAAe,IAAD,8BACV,+CAaJC,aAAe,SAAC7E,GAEZ,EAAKjC,SAAL,eACKiC,EAAMlB,OAAOR,GAAI0B,EAAMlB,OAAOV,SAjBzB,EAuBd0G,OAAS,SAAC9E,GAENA,EAAM7C,iBAIN,IAAM4H,EAAiB,EAAKrK,MAAMsK,YAI5BC,EAAQ,EAAK3H,MAAM2H,MAEnBC,EAAW,EAAK5H,MAAM4H,SAE5BlL,IAASmL,OAAOC,2BAA2BH,EAAMC,GAAW1J,MAAK,SAACiJ,GAC9D,IAAMY,EAAUZ,EAAOzC,KAAKnB,IAI5B7G,IAASqB,WAAWC,IAApB,UAA2B+J,EAA3B,uBAAwD9J,KAAK,SAASC,MAAK,SAACC,GACxE,EAAKf,MAAM4K,YAAY7J,EAASE,aAIrC4J,OAAM,SAAU1D,GAIfkD,QAnDM,EA2DdS,gBAAkB,SAACxF,GAEfA,EAAM7C,iBACNnD,IAASmL,OAAOM,uBAAuB,EAAKnI,MAAMoI,gBAAgBlK,MAAM,WACpE,EAAKuC,SAAS,CACV4H,WAAW,QAhET,EAyEdC,aAAe,WAEX,IAAMC,EAAyB,EAAKnL,MAAMoL,kBACpCC,EAAW,IAAI/L,IAASmL,KAAKa,mBAEnChM,IAASmL,OAAOc,gBAAgBF,GAAUvK,MAAK,SAAUiJ,GAIrD,IAAMyB,EAAYzB,EAAO0B,mBAAmBC,UAE5CP,EAAuBK,OAlF3B,EAAK5I,MAAQ,CACT2H,MAAO,GACPC,SAAU,GACVmB,gBAAgB,EAChBX,eAAgB,GAChBC,WAAW,EACXW,QAAQ,GARF,E,sEA4FJ,IAAD,OAEL,OACI,yBAAK1L,UAAU,UACX,0BAAO6D,OAAO,GAAGC,SAAUC,KAAKmG,QAC5B,uCACA,2BAAOlG,QAAQ,SAAf,eACA,2BAAO/D,KAAK,QAAQyD,GAAG,QAAQO,SAAUF,KAAKkG,aAAczG,MAAOO,KAAKrB,MAAM2H,MAAO5E,UAAQ,IAC7F,2BAAOzB,QAAQ,YAAf,kBACA,2BAAO/D,KAAK,WAAWyD,GAAG,WAAWO,SAAUF,KAAKkG,aAAczG,MAAOO,KAAKrB,MAAM4H,SAAU7E,UAAQ,IACtG,kBAAC,EAAD,CAAcvF,MAAM,aAIxB,4BAAQuE,QAASV,KAAKiH,cAAtB,kBAAmD,uBAAGhL,UAAU,gBAAgBiF,eAAa,KAE7F,4BAAQR,QAAS,WAAQ,EAAKtB,SAAS,CAAEsI,gBAAiB,EAAK/I,MAAM+I,mBAArE,yBAEC1H,KAAKrB,MAAM+I,gBAER,0BAAMzL,UAAU,kBAAkB6D,OAAO,GAAGC,SAAUC,KAAK6G,iBACtD7G,KAAKrB,MAAMqI,WAER,qGAEJ,2BAAO/G,QAAQ,kBAAf,qBACA,2BAAO/D,KAAK,QAAQyD,GAAG,iBAAiBO,SAAUF,KAAKkG,aAAcxE,UAAQ,IAC7E,kBAAC,EAAD,CAAcvF,MAAM,2B,GAzHnB0E,aCaV+G,MAff,SAA0B7L,GAEtB,OACI,yBAAKE,UAAU,YACX,2BAAOgE,QAAQ,YAAf,2BACA,4BAAQqB,KAAK,WAAW3B,GAAG,WAAWO,SAAUnE,EAAMkG,SAAU4F,aAAa,KAAKnG,UAAQ,GACrF3F,EAAM+L,UAAU1H,KAAI,SAACrD,EAAUuD,GAC5B,OAAO,4BAAQhD,IAAKgD,EAAOX,GAAI5C,EAASuE,KAAM7B,MAAO1C,EAASgL,MAAQhL,EAASuE,KAAxE,WC+HZ0G,E,YAlIX,aAAe,IAAD,8BACV,+CAUJrB,YAAc,SAACtF,GAEX,EAAKjC,SAAS,CACVrC,SAAUsE,EAAMlB,OAAOV,SAdjB,EAqBdwI,WAAa,SAAC5G,GACVA,EAAM7C,iBAEN,IAAM0J,EAAsB,EAAKnM,MAAMoM,YACjC1L,EAAW,EAAKkC,MAAM2C,KAKK,UAJA7E,EAAS2L,cAAcC,UAAU,EAAG,GAKjEH,IAGoB7M,IAASqB,WAAWC,MAE5BC,KAAK,SAASC,MAAK,SAACC,GAE5B,IAAMqG,EAAerG,EAASE,MACxBoG,EAAgB,GACtB,IAAK,IAAIC,KAAQF,EACb,GAAa,kBAATE,EAA0B,CAG1B,IAAMC,EAAUjI,IAASqB,WAAWC,IAApB,UAA2B0G,EAA3B,uBAChBD,EAAcjF,KAAKmF,EAAQ1G,KAAK,UAOxC2G,QAAQC,IAAIJ,GAAevG,MAAK,SAAC4G,GACHA,EAAOrD,KAAI,SAACkI,GAClC,OAAOA,EAAKtL,SAKM+F,SAAStG,GAE3ByL,IAIA7M,IAASmL,OAAO+B,+BAA+B,EAAK5J,MAAM2H,MAAO,EAAK3H,MAAM4H,UAAU1J,MAAK,SAACiJ,GAExF,IAAMrI,EAAO,CAEL,OAAS,EACT,SAAY,CACR,SAAY,EAAKkB,MAAM5B,SACvB,SAAY,EAAK4B,MAAM2C,KACvB,MAAS,EAAK3C,MAAM2H,QAKhCjL,IAASqB,WAAWC,IAApB,UAA2BmJ,EAAOzC,KAAKnB,MAAO+B,OAAOxG,GAErDqI,EAAOzC,KAAKmF,wBAAwB3L,MAAK,eAOzCiJ,EAAOzC,KAAKoF,cAAc,CACtBC,YAAa,EAAK/J,MAAM2C,UAE7BsF,OAAM,WAILsB,cA9FV,EAyGdhC,aAAe,SAAC7E,GACZ,EAAKjC,SAAL,eACKiC,EAAMlB,OAAOR,GAAK0B,EAAMlB,OAAOV,SAzGpC,EAAKd,MAAQ,CACT2H,MAAO,GACPC,SAAU,GACVjF,KAAM,GACNvE,SAAU,KACV4L,UAAS,GAPH,E,sEAgHV,OACI,0BAAM1M,UAAU,SAAS6D,OAAO,GAAGC,SAAUC,KAAKiI,YAC9C,uCACA,2BAAOhI,QAAQ,QAAf,kBACA,2BAAO/D,KAAK,OAAOyD,GAAG,OAAOiJ,UAAW,GAAI1I,SAAUF,KAAKkG,aAAczG,MAAOO,KAAKrB,MAAM2C,KAAMI,UAAQ,IACzG,2BAAOzB,QAAQ,SAAf,eACA,2BAAO/D,KAAK,QAAQyD,GAAG,QAAQO,SAAUF,KAAKkG,aAAczG,MAAOO,KAAKrB,MAAM2H,MAAO5E,UAAQ,IAC7F,2BAAOzB,QAAQ,YAAf,kBACA,2BAAO/D,KAAK,WAAWyD,GAAG,WAAWkJ,UAAW,EAAG3I,SAAUF,KAAKkG,aAAczG,MAAOO,KAAKrB,MAAM4H,SAAU7E,UAAQ,IACpH,kBAAC,EAAD,CAAkBoG,UAAW9H,KAAKjE,MAAM+L,UAAW7F,SAAUjC,KAAK2G,cAClE,kBAAC,EAAD,CAAcxK,MAAM,iB,GA5Hf0E,aCgHNiI,E,YA9GX,aAAe,IAAD,8BACV,+CAWJC,YAAc,SAAC1H,GACXA,EAAM7C,iBAIN,EAAKY,SAAS,CAAC4J,WAAU,IAIzB3N,IAASmL,OAAOyC,eAAe5N,IAASmL,KAAK0C,KAAKC,YAAYC,MAAMvM,MAAK,WAIrE,OAAOxB,IAASmL,OAAO6C,oBAAoBxM,MAAK,SAACY,GAE7C,IAAMuG,EAASvG,EAAK4F,KAAKnB,IAID7G,IAASqB,WAAWC,IAAI,kBAEhCC,KAAK,SAASC,MAAK,SAAC4C,GAChC,EAAKL,SAAS,CAEV4E,OAAQA,IAMZ,IAAMvG,EAAO,CAET,OAAS,EACT,SAAY,CACR,SAAY,EAAKkB,MAAM5B,SACvB,SAAW,QAAX,OAAoB0C,EAAMzC,MAAMsM,aAChC,MAAS,KACT,SAAW,IAOnBjO,IAASqB,WAAWC,IAApB,UAA2BqH,IAAUC,OAAOxG,SAGjDZ,MAAK,WAIJ0M,YAAW,WACP,EAAKnK,SAAS,CAAE4J,WAAW,MAC5B,YAjED,EA0EdrC,YAAc,SAACtF,GACX,EAAKjC,SAAS,CACVrC,SAAUsE,EAAMlB,OAAOV,SA1E3B,EAAKd,MAAQ,CACT2H,MAAO,GACPC,SAAU,GACVjF,KAAM,GACNvE,SAAU,KACViH,OAAQ,GACRgF,WAAW,GARL,E,sEAmFV,OACI,6BAIKhJ,KAAKrB,MAAMqK,WAER,yBAAK/M,UAAU,iBACX,yBAAKA,UAAU,mBAG3B,0BAAMA,UAAU,cAAc6D,OAAO,GAAGC,SAAUC,KAAK+I,aAEnD,gDACA,wOACA,uHACA,kBAAC,EAAD,CAAkBjB,UAAW9H,KAAKjE,MAAM+L,UAAW7F,SAAUjC,KAAK2G,cAClE,kBAAC,EAAD,CAAcxK,MAAM,kB,GAtGV0E,aCHpB2I,EAAU,WACZnO,IAASmL,OAAOgD,WAgCLC,MA5Bf,SAAgB1N,GAGZ,OACI,gCACI,yBAAKE,UAAU,WACX,yBAAKA,UAAU,cACX,2CAICF,EAAM2N,UAEH,6BACI,4BAAQhJ,QAAS8I,GAAjB,YAAmC,uBAAGvN,UAAU,sBAAsBiF,eAAa,KACnF,4BAAQlF,UAAUD,EAAMU,SAAyBiE,QAAS,WAAQ3E,EAAM4N,oBAAxE,YAAqG,uBAAG1N,UAAU,cAAciF,eAAa,UCb1J0I,MARf,WACI,OACI,gCACI,yGCoEGC,E,YAlEX,aAAe,IAAD,8BACV,+CA8BJC,mBAAqB,SAACzI,GAClB,EAAKjC,SAAS,CACVrC,SAAUsE,EAAMlB,OAAOV,SAjCjB,EAyCdsK,YAAc,WACV1O,IAASqB,WAAWC,IAApB,UAA2B,EAAKZ,MAAM2K,QAAtC,eAA2DzC,OAAO,CAC9DlH,SAAU,EAAK4B,MAAM5B,YAzCzB,EAAK4B,MAAQ,CACT5B,SAAU,KACViN,gBAAiB,WAJX,E,iFAQO,IAAD,OACVlC,EAAY9H,KAAKjE,MAAM+L,UAEvBpB,EAAU1G,KAAKjE,MAAM2K,QAG3BrL,IAASqB,WAAWC,IAApB,UAA2B+J,EAA3B,uBAAwD9J,KAAK,SAASC,MAAK,SAACC,GAExE,IAAMkN,EAAkBlC,EAAUmC,QAAO,SAACC,GAEtC,OAAOA,EAAenC,OAASjL,EAASE,SAG5C,EAAKoC,SAAS,CACV4K,gBAAiBA,EAAgB,GAAG1I,Y,+BA4B5C,OACI,yBAAKrF,UAAU,gBACX,4BAAQA,UAAU,QAAQyE,QAASV,KAAKjE,MAAMoO,eAAe,uBAAGlO,UAAU,sBAAsB8J,aAAW,oBAC3G,wCACA,0DAA+B,8BAAQ/F,KAAKrB,MAAMqL,kBAClD,wJACA,0BAAMlK,OAAO,GAAGC,SAAUC,KAAK+J,aAC3B,kBAAC,EAAD,CAAkB9H,SAAUjC,KAAK8J,mBAAoBhC,UAAW9H,KAAKjE,MAAM+L,YAC3E,kBAAC,EAAD,CAAc3L,MAAM,uB,GA5Db0E,aCaZuJ,MAff,SAAsBrO,GAClB,OACI,yBAAKE,UAAU,gBAEX,yCAAc,0BAAMA,UAAU,QAAhB,iBACd,iKAEA,8EAEA,4BAAQA,UAAU,eAAeyE,QAAS3E,EAAMuG,iBAAhD,YCoGG+H,E,YA1GX,aAAe,IAAD,8BACV,+CAQJC,yBAA2B,SAACjJ,GACxBA,EAAM7C,iBAEN,IAAM0J,EAAsB,EAAKnM,MAAMwO,4BACjC9N,EAAW,EAAKkC,MAAMlC,SACtB+N,EAA2B/N,EAAS2L,cAAcC,UAAU,EAAG,GAE/DtL,EAAW,EAAK4B,MAAM5B,SAEtBsG,EAAOhI,IAASmL,OAAOiE,YAEvBC,EAAyB,EAAK3O,MAAM4O,eAGT,UAA7BH,EACAtC,IAIoB7M,IAASqB,WAAWC,MAE5BC,KAAK,SAASC,MAAK,SAACC,GAE5B,IAAMqG,EAAerG,EAASE,MACxBoG,EAAgB,GACtB,IAAK,IAAIC,KAAQF,EACb,GAAa,kBAATE,EAA0B,CAG1B,IAAMC,EAAUjI,IAASqB,WAAWC,IAApB,UAA2B0G,EAA3B,uBAChBD,EAAcjF,KAAKmF,EAAQ1G,KAAK,UAOxC2G,QAAQC,IAAIJ,GAAevG,MAAK,SAAC4G,GAK7B,GAJ0BA,EAAOrD,KAAI,SAACkI,GAClC,OAAOA,EAAKtL,SAGM+F,SAAStG,GAE3ByL,QAEG,CAEH,IAAMzK,EAAO,CAET,OAAS,EACT,SAAY,CACR,SAAYV,EACZ,SAAYN,EACZ,MAAS4G,EAAKiD,QAKtBjL,IAASqB,WAAWC,IAApB,UAA2B0G,EAAKnB,MAAO+B,OAAOxG,GAE9C4F,EAAKoF,cAAc,CACfC,YAAajM,IAGjB,EAAK2C,SAAS,CACV3C,SAASA,IACX,WACMiO,EAAuBjO,GACvB8M,YAAW,WACPqB,OAAOC,SAASC,WACjB,gBA9E3B,EAAKnM,MAAQ,CACTlC,SAAU,GACVM,SAAU,MAJJ,E,sEA0FJ,IAAD,OACL,OACI,yBAAKd,UAAU,gBACX,8CACA,0BAAM6D,OAAO,GAAGC,SAAUC,KAAKsK,0BAC3B,mFACA,2BAAOrK,QAAQ,YAAf,sBACA,2BAAO2I,UAAW,GAAI1M,KAAK,OAAOyD,GAAG,WAAWF,MAAOO,KAAKrB,MAAMlC,SAAUyD,SAAU,SAAC3B,GAAK,EAAKa,SAAS,CAAC3C,SAAS8B,EAAE4B,OAAOV,SAAUiC,UAAQ,IAC/I,kBAAC,EAAD,CAAkBoG,UAAW9H,KAAKjE,MAAM+L,UAAW7F,SAAU,SAAC1D,GAAQ,EAAKa,SAAS,CAAErC,SAAUwB,EAAE4B,OAAOV,WACzG,kBAAC,EAAD,CAActD,MAAM,wB,GApGb0E,aCoVZkK,E,YAxUb,aAAe,IAAD,8BACZ,+CA8IFpE,YAAc,SAAC5J,GACb,EAAKqC,SAAS,CACZrC,SAAUA,KA/IZ,EAAK4B,MAAQ,CACX+K,UAAU,EACV1F,OAAQ,KACRU,UAAW,KACXpD,KAAM,KACNvE,SAAU,KACViO,SAAU,KACVC,eAAgB,SAChBC,cAAe,CAAC,WAChBC,gBAAgB,EAChB9E,aAAa,EACb+E,aAAa,EACbC,aAAc,GACdC,eAAe,EACfC,WAAW,EACXvC,WAAW,GAjBD,E,iFAwBO,IAAD,OAElB3N,EAASmL,OAAOgF,oBAAmB,SAACnI,GAIlC,GAAIA,GAAQ,EAAK1E,MAAM4M,UAErBlI,EAAKoF,cAAc,CACjBC,YAAa,KAGf,EAAKtJ,SAAS,CACZkC,KAAM,KACNoI,UAAU,EACVpD,MAAOjD,EAAKiD,MACZtC,OAAQX,EAAKnB,IACb8G,WAAW,SAMT,GAAI3F,GAAQA,EAAKoI,cAErB,EAAKrM,SAAS,CACZsK,UAAU,EACV1F,OAAQX,EAAKnB,IACbZ,KAAM+B,EAAKqF,YACXpC,MAAOjD,EAAKiD,MACZvJ,SAAU,GACViM,WAAW,SAMT,GAAI3F,IAASA,EAAKoI,eAAiBpI,EAAKiD,MAC5C,EAAKlH,SAAS,CACZgM,aAAa,EACbpC,WAAW,SAKR,GAAI3F,GAAQA,EAAKqI,YAAa,CACnC,IAAMC,EAAkBtQ,EAASqB,WAAWC,IAAI,kBAEhDgP,EAAgB/O,KAAK,SAASC,MAAK,SAACC,GAClC,EAAKsC,SAAS,CACZsK,UAAU,EACV1F,OAAQX,EAAKnB,IACboE,MAAO,KACP0C,WAAW,EACX1H,KAAK,QAAD,OAAUxE,EAASE,MAAMsM,eAG/BqC,EAAgB1H,OAAO,CACrBqF,YAAaxM,EAASE,MAAMsM,YAAc,YAQ9C,EAAKlK,SAAS,CACZsK,UAAU,EACV1F,OAAQ,KACRqH,cAAc,EACdrC,WAAW,OAOjB/L,IAAM,CACJC,OAAQ,MACRC,IAAK,yDACLC,aAAc,OACdC,OAAQ,CACNC,IAAK,uFACLsO,GAAI,QAEL/O,MAAK,SAACY,GAEP,IAAMyM,EAAiBzM,EAAKA,KAAKoO,MAC7BX,EAAgB,GAKpB,IAAK,IAAI1N,KAAQ0M,EACfgB,EAAc/M,KAAK,CACjBmD,KAAM4I,EAAe1M,GACrBuK,KAAMvK,IAQV0N,EAAgBA,EAAcY,MAAK,SAAUC,EAAGC,GAC9C,OAASD,EAAEzK,KAAO0K,EAAE1K,MAAS,EAAMyK,EAAEzK,OAAS0K,EAAE1K,KAAQ,EAAI,KAI9D,EAAKlC,SAAS,CACZ8L,cAAeA,S,+BAiBX,IAAD,OAEP,OAEE,kBAAC,IAAMe,SAAP,KAEGjM,KAAKrB,MAAMqK,WAEV,yBAAK/M,UAAU,iBACb,yBAAKA,UAAU,mBAOnB,kBAAC,EAAD,CAAQQ,SAAUuD,KAAKrB,MAAM2C,KAAMoI,SAAU1J,KAAKrB,MAAM+K,SAAUC,gBAAiB,WAAQ,EAAKvK,SAAS,CAAE+L,gBAAiB,EAAKxM,MAAMwM,oBAEvI,8BAEE,yBAAKlP,UAAU,WAEb,yBAAKA,UAAU,WAIZ+D,KAAKrB,MAAM0M,cAEV,kBAAC,EAAD,CAAc/I,gBAAiB,WAAQ,EAAKlD,SAAS,CAAEiM,cAAc,OAUtErL,KAAKrB,MAAM2M,eAEV,kBAAC,EAAD,CACE7K,MAAM,6BACN6B,gBAAiB,WAAQ,EAAKlD,SAAS,CAAEkM,eAAe,KACxD1L,QAAQ,uIACR4C,iBAAiB,EACjBD,cAAc,OAOjBvC,KAAKrB,MAAMyM,aAEV,kBAAC,EAAD,CACE3K,MAAM,iCACN6B,gBAAiB,WAAQsI,OAAOC,SAASC,UACzClL,QAAQ,2GACR2C,cAAc,KACdC,iBAAiB,EACjBC,kBAAmB,WAAQpH,EAASmL,OAAOiE,YAAYjC,yBACvD9F,eAAe,iBAOlB1C,KAAKrB,MAAM0H,aAEV,kBAAC,EAAD,CACE5F,MAAM,6BACN6B,gBAAiB,WAAQ,EAAKlD,SAAS,CAAEiH,aAAa,KACtDzG,QAAQ,mDACR4C,iBAAiB,EACjBD,cAAc,QAOhBvC,KAAKrB,MAAM4M,WAAiC,OAApBvL,KAAKrB,MAAM2C,OAAkBtB,KAAKrB,MAAM+K,UAEhE,kBAAC,EAAD,CACEa,4BAA6B,WAAO,EAAKnL,SAAS,CAACkM,eAAe,KAClE5E,QAAS1G,KAAKrB,MAAMqF,OACpB2G,eAAgB,SAAClO,GAAe,EAAK2C,SAAS,CAAEkC,KAAM7E,KACtDiI,UAAW1E,KAAKrB,MAAM+F,UACtBoD,UAAW9H,KAAKrB,MAAMuM,gBAWzBlL,KAAKrB,MAAM+K,SAKV,kBAAC,EAAD,CAAU1F,OAAQhE,KAAKrB,MAAMqF,OAAQ1C,KAAMtB,KAAKrB,MAAM2C,KAAMvE,SAAUiD,KAAKrB,MAAM5B,SAAUmP,eAAgBlM,KAAKrB,MAAMuN,iBAMtH,yBAAKjQ,UAAU,WAIb,yBAAKA,UAAU,kBAEb,4BAAQyE,QAAS,SAACnC,GAAD,OAAO,EAAKa,SAAS,CAAE6L,eAAgB1M,EAAE4B,OAAOV,SAAUA,MAAM,SAASxD,UAAyC,WAA9B+D,KAAKrB,MAAMsM,eAA8B,GAAK,WAAYjP,SAAwC,WAA9BgE,KAAKrB,MAAMsM,gBAApL,WAEA,4BAAQvK,QAAS,SAACnC,GAAD,OAAO,EAAKa,SAAS,CAAE6L,eAAgB1M,EAAE4B,OAAOV,SAAUA,MAAM,SAASxD,UAAyC,WAA9B+D,KAAKrB,MAAMsM,eAA8B,GAAK,WAAYjP,SAAwC,WAA9BgE,KAAKrB,MAAMsM,gBAApL,WAEA,4BAAQvK,QAAS,SAACnC,GAAD,OAAO,EAAKa,SAAS,CAAE6L,eAAgB1M,EAAE4B,OAAOV,SAAUA,MAAM,cAAcxD,UAAyC,gBAA9B+D,KAAKrB,MAAMsM,eAAmC,GAAK,WAAYjP,SAAwC,gBAA9BgE,KAAKrB,MAAMsM,gBAA9L,kBAM6B,WAA9BjL,KAAKrB,MAAMsM,eAIV,kBAAC,EAAD,CAAY9D,kBAAmB,SAACgF,GAAkB,EAAK/M,SAAS,CAAEmM,UAAWY,KAAmBrE,UAAW9H,KAAKrB,MAAMuM,cAAevE,YAAa3G,KAAK2G,YAAaN,YAAa,WAAK,EAAKjH,SAAS,CAACiH,aAAY,OAInL,WAA9BrG,KAAKrB,MAAMsM,eAIT,kBAAC,EAAD,CAAQhJ,SAAUjC,KAAK2G,YAAamB,UAAW9H,KAAKrB,MAAMuM,cAAe/C,YAAa,WACpF,EAAK/I,SAAS,CAACkM,eAAe,OAIhC,kBAAC,EAAD,CAAaxD,UAAW9H,KAAKrB,MAAMuM,iBAQ1ClL,KAAKrB,MAAMwM,gBAIV,kBAAC,EAAD,CACEzE,QAAS1G,KAAKrB,MAAMqF,OACpB8D,UAAW9H,KAAKrB,MAAMuM,cACtBlB,gBAAiBhK,KAAKrB,MAAM5B,SAC5BoN,cAAe,WAAQ,EAAK/K,SAAS,CAAE+L,gBAAiB,EAAKxM,MAAMwM,uBAU7E,kBAAC,EAAD,W,GAlUUtK,aCJEuL,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1H,SAAS2H,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/P,MAAK,SAAAgQ,GACjCA,EAAaC,kB","file":"static/js/main.2d049af9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImage.8c35acc9.png\";","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBlKx7tzmawALlymKEkgJZiLdY4IE2VXHg\",\r\n    authDomain: \"translatechat-6c518.firebaseapp.com\",\r\n    databaseURL: \"https://translatechat-6c518.firebaseio.com\",\r\n    projectId: \"translatechat-6c518\",\r\n    storageBucket: \"translatechat-6c518.appspot.com\",\r\n    messagingSenderId: \"187513714020\",\r\n    appId: \"1:187513714020:web:aa171bc1b36018a37d3671\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n","import React from \"react\";\r\n\r\nfunction SubmitButton(props) {\r\n    return (\r\n        <button disabled={props.disabled} className=\"submitButton\" type=\"submit\">{props.label}</button>\r\n    )\r\n}\r\n\r\nexport default SubmitButton;","import axios from \"axios\";\r\nimport firebase from \"firebase\";\r\n\r\nconst translatorApiKey = \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\";\r\n\r\n// Function that takes a text, translates it to the selected language and dtore the text on the databse of the reciever user\r\n\r\nfunction translate(text,sender,reciever,nickname) {\r\n\r\n    firebase.database().ref(`${reciever}/settings/language`).once(\"value\").then((snapshot)=>{\r\n        \r\n        const language = snapshot.val();       \r\n\r\n        axios({\r\n            method:\"get\",\r\n            url: \"https://translate.yandex.net/api/v1.5/tr.json/translate\",\r\n            responseType: \"json\",\r\n            params: {\r\n                key: translatorApiKey,\r\n                text: text,\r\n                format: \"plain\",\r\n                lang: language,\r\n            }\r\n        }).then((data) => {\r\n            const translation = data.data.text.join(\"\");\r\n            const dbRef = firebase.database().ref(`${reciever}/chats/${sender}/messages`);\r\n            const translatedMessage = {\r\n                \"message\": translation,\r\n                \"type\": \"recieved\",\r\n                \"time\": Date(Date.now().toString()).split(\" GMT\").splice(0, 1),\r\n                \"format\" : \"text\"\r\n            }\r\n            dbRef.push(translatedMessage);\r\n            \r\n\r\n            firebase.database().ref(`${reciever}/chats/${sender}/nickname`).set(nickname);\r\n\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default translate;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\n\r\nclass GiphSearch extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gifsArray: [],\r\n            query:\"\",\r\n        }\r\n    }\r\n\r\n    // When the component gets mounted then make an api call to get 6 random top gifs from GIPHY\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            \r\n            url: \"//api.giphy.com/v1/gifs/trending\",\r\n            responseType: `json`,\r\n            method: `get`,\r\n            params: {\r\n                api_key: \"5o3FJkFysfmiqM09a9Z3ifEWL0HqHhLB\",\r\n                \r\n            }\r\n        }).then((gifs) => {\r\n            // Get a random number between 0 and 19 because the api call return an array with 25 results and te idea is to get 6 random gifs \r\n            const randomNumber = Math.floor(Math.random() * 19);\r\n            const resultsToReturn = gifs.data.data.slice(randomNumber, randomNumber + 6);\r\n            \r\n            // set state and re render to show those gifs\r\n\r\n            this.setState({\r\n                gifsArray:resultsToReturn\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    // Method to search for gifs based on words. It will get the input of the user and make an api call to get 6 gifs related to that word\r\n\r\n    search = (e) => {\r\n        e.preventDefault();\r\n\r\n        // making api call\r\n\r\n        axios({\r\n            url: `//api.giphy.com/v1/gifs/search`,\r\n            responseType: `json`,\r\n            method: `get`,\r\n            params: {\r\n                api_key: \"5o3FJkFysfmiqM09a9Z3ifEWL0HqHhLB\",\r\n                q: this.state.query\r\n            }\r\n        }).then((gifs) => {\r\n            const randomNumber = Math.floor(Math.random() * 19);\r\n            const resultsToReturn = gifs.data.data.slice(randomNumber, randomNumber + 6);\r\n            this.setState({\r\n                gifsArray: resultsToReturn\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    // Method to store the gif in the database in the conversation of both users\r\n\r\n    sendGif= (e) => {\r\n        const gifUrl = e.currentTarget.value;\r\n        const altTag = e.currentTarget.id;\r\n    \r\n        // Getting the reference for the sender\r\n\r\n        let dbRef = firebase.database().ref(`${this.props.sender}/chats/${this.props.reciever}/messages`);\r\n\r\n        let message = {\r\n            \"message\": gifUrl,\r\n            \"type\": \"sent\",\r\n            \"time\": Date(Date.now().toString()).split(\" GMT\").splice(0, 1),\r\n            \"format\": \"gif\",\r\n            \"altTag\" : altTag\r\n        }\r\n\r\n        // Updating the database\r\n\r\n        dbRef.push(message);\r\n\r\n        // Getting the reference for the reciever\r\n\r\n        dbRef = firebase.database().ref(`${this.props.reciever}/chats/${this.props.sender}/messages`);\r\n\r\n        message = {\r\n            \"message\": gifUrl,\r\n            \"type\": \"recieved\",\r\n            \"time\": Date(Date.now().toString()).split(\" GMT\").splice(0, 1),\r\n            \"format\": \"gif\",\r\n            \"altTag\" : altTag\r\n        }\r\n\r\n        // Updating the database\r\n\r\n        dbRef.push(message);\r\n\r\n        // Run the function to close the container that has the gifs that were found\r\n\r\n        this.props.closeGiphy();\r\n    }\r\n\r\n\r\n    // Render the page\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gifSearch\">\r\n                <form action=\"\" onSubmit={this.search}>\r\n                    <label htmlFor=\"gifSearchInput\">Search in GIPHY: </label>\r\n                    <input type=\"text\" id=\"gifSearchInput\" value={this.state.query} onChange={(e) => {this.setState({query: e.target.value})}}/>\r\n                    <SubmitButton label=\"Search\"/>\r\n                </form>\r\n                <div>\r\n\r\n                    {/* Create a button for every gif found */}\r\n\r\n                    {this.state.gifsArray.map((gif, index) => {\r\n                        return (\r\n                            <button key={index} className=\"gif\" value={gif.images.downsized.url} id={gif.title} onClick={this.sendGif}>\r\n                                <img src={gif.images.downsized.url} alt={gif.title}/>\r\n                            </button>\r\n                        )\r\n                    })}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GiphSearch\r\n\r\n","import React, { Component } from \"react\";\r\nimport GiphSearch from \"./GiphsSearch\"\r\n\r\n\r\n\r\nclass GiphyComponent extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            giphyOpen: false,\r\n            \r\n        }\r\n    }\r\n\r\n    // method to make the giphSearch appear and desappear\r\n\r\n    toggleGiphySearch = () => {\r\n        this.setState({\r\n            giphyOpen: !this.state.giphyOpen\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"giphyDiv\">\r\n                <button disabled={this.props.chatting ? false : true} onClick={this.toggleGiphySearch}>Add Gif <i className=\"fas fa-image\" aria-hidden={true}></i></button>\r\n                \r\n                {/* If the giphyOpen state is true (if the user has opened the gif container) and the user is chatting with someone then render the GiphSearch component */}\r\n\r\n                {this.state.giphyOpen && this.props.chatting\r\n                    ?\r\n                    <GiphSearch closeGiphy={this.toggleGiphySearch} sender={this.props.sender} reciever={this.props.reciever}/>\r\n                    :\r\n                    \"\"\r\n                    \r\n                }\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default GiphyComponent","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport translate from \"./translate\"\r\nimport GiphyComponent from \"./GiphyComponent\";\r\n\r\n\r\nclass ChatForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            text:\"\"\r\n        }\r\n    }\r\n    \r\n    // Method that will handle the onSubmit by storing the message in the database and making the api call usign the translate function which will then store the transalted message in the datbase of the chat for the other user in the selected language.\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref(`${this.props.sender}/chats/${this.props.reciever}/messages`);\r\n\r\n        const message = {\r\n            \"message\": this.state.text,\r\n            \"type\": \"sent\",\r\n            \"time\": Date(Date.now().toString()).split(\" GMT\").splice(0, 1),\r\n            \"format\" : \"text\"\r\n        }\r\n        dbRef.push(message);\r\n        \r\n        // Calling the translate function\r\n\r\n        translate(this.state.text,this.props.sender,this.props.reciever,this.props.nickname);\r\n\r\n        this.setState({\r\n            text:\"\"\r\n        })\r\n    }\r\n\r\n\r\n    // Rendering the component\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chatFormDiv\">\r\n\r\n                {/* Rendering the GiphyComponent component which lets the user send GIFS */}\r\n\r\n                <GiphyComponent sender={this.props.sender} reciever={this.props.reciever} chatting={this.props.chatting} />\r\n\r\n                {/* Form for the text messages that the user inputs */}\r\n\r\n                <form className=\"chatForm\" action=\"\" onSubmit={this.handleSubmit}>\r\n                    <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.text} onChange={(e)=>{this.setState({text:e.target.value})}} disabled={this.props.reciever ? false : true} placeholder={this.props.reciever ? \"Enter text to send\" : \"Please first select a chat\"} required></textarea>\r\n                    <SubmitButton disabled={this.props.reciever ? false : true} label=\"Send\"/>\r\n                </form>\r\n                \r\n\r\n            </div>\r\n\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default ChatForm;","import React from \"react\";\r\nimport noImage from \"./noImage.png\"\r\n\r\n\r\nfunction RecentMessages(props) {\r\n    return (\r\n        <div id=\"recentMessages\" className=\"recentMessagesDiv\">\r\n            <div className=\"chatHeader\">\r\n\r\n                {/* If the user has an openned chat show the placeholder image */}\r\n\r\n                {props.chattingWith && <img src={noImage} alt=\"Placeholder image of a user\" />}\r\n\r\n                {/* If the user is chatting with somone or has an opened conversation then show the other users name if not then show a message telling the user to select a conversation */}\r\n                    \r\n                {props.chattingWith ? <h3>{props.chattingWith}</h3> : <h3>Please select a conversation from the list on the left!</h3>}\r\n\r\n            </div>\r\n            <ul className=\"recentMessages\">\r\n\r\n                {/* Map through all the messages and render them on the page */}\r\n\r\n                {   \r\n                    props.messages.map((message, index) => {\r\n                        return (\r\n                            <li key={index} className={message.type} >\r\n                                <p className=\"time\">{message.time}</p>\r\n                                {message.format === \"text\"\r\n                                    ?\r\n                                    <p className=\"message\">{message.message}</p>\r\n                                    :\r\n                                    <img src={message.message} alt={message.altTag}/>\r\n                                }\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentMessages;","import React from \"react\";\r\nimport noImage from \"./noImage.png\";\r\n\r\n\r\n\r\nfunction FriendSelector(props) {\r\n\r\n    // Function passed by props to get the selected conversation and then display it on the page\r\n\r\n    const setName = function(event){\r\n        props.function(event.currentTarget.value, event.currentTarget.id);\r\n    }\r\n\r\n\r\n    // Rendering the component\r\n\r\n    return (\r\n        <li className=\"friendButton\">\r\n            <button onClick={setName} value={props.name} id={props.uid}>\r\n                {props.imgUrl\r\n                    ?\r\n                    <img src={props.imgUrl} alt={`A picture of ${props.name}`}/>\r\n                    :\r\n                <img src={noImage} alt={`The user has no picture`}/>\r\n            } \r\n                <p>{props.name}</p>\r\n            </button>\r\n            <button className=\"deleteButton\" onClick={props.deleteFunction} value={props.index}><i className=\"fas fa-trash-alt\"></i></button>\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default FriendSelector;","import React from \"react\";\r\n\r\nfunction AlertMessage(props) {\r\n    \r\n    return(\r\n        <div className=\"alert\">\r\n            <h3>{props.title}</h3>\r\n            <p>{props.message}</p>\r\n            <div>\r\n                <button onClick={() => { props.functionToClose() }}>{props.originalLabel}</button>\r\n                \r\n                {/* If the props of aditionalButton is true then show the extra button */}\r\n                \r\n                {props.aditionalButton ? <button onClick={props.aditionalFunction}>{props.aditionalLabel}</button> : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertMessage;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"./firebase\";\r\nimport AlertMessage from \"./AlertMessage\";\r\n\r\n\r\nclass AddFriendButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nickname:\"\",\r\n            openedChats: [],\r\n            error: false,\r\n            errorMessage:\"\",\r\n        }\r\n    }\r\n\r\n\r\n    // When the component gets mounted then  get all the \r\n\r\n    componentDidMount() {\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n        const friendsReference = firebase.database().ref(`${this.props.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n        friendsReference.on(\"value\", (snapshot) => {\r\n            const openedChats = [];\r\n            const openedChatsData = snapshot.val();\r\n            \r\n            for (let chat in openedChatsData) {\r\n            \r\n                openedChats.push(openedChatsData[chat].nickname);\r\n            }\r\n\r\n            // changin the state and rerendering the page\r\n            \r\n            this.setState({\r\n                openedChats:openedChats\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    // A method for the onSubmit of the form that checks if the nickname the user inputs is valid first and if it is then creates a chat between both users on the database.\r\n    \r\n    addFriend = (event) => {\r\n        event.preventDefault()\r\n        \r\n        const usersId = []\r\n\r\n        // Checking if theres no opened conversations opened with that user and that the user isnt trying to start a conversation with itself\r\n        \r\n        if(this.state.openedChats.includes(this.state.nickname) || (this.state.nickname === this.props.userNickname)){\r\n            \r\n            // Show the error message \r\n            this.setState({\r\n                errorMessage: `You already have an opened chat with ${this.state.nickname} or you are trying to chat with yourself`,\r\n                error: true\r\n            });\r\n            \r\n        }else{\r\n\r\n            // If not, then check if the nickname matches an existing user\r\n\r\n            const databaseRef = firebase.database().ref();\r\n        \r\n            databaseRef.once(\"value\").then((snapshot) => {\r\n                \r\n                const databaseData = snapshot.val()\r\n\r\n                // Creating an empty array to store the promises generated by the listener\r\n\r\n                const arrayPromises = []\r\n\r\n                // For every key in the snapshot that is not the general configuration (basically all users) get the promise of that users nicknames and push it to the promise array\r\n\r\n                for (let user in databaseData) {\r\n                    if (user !== \"generalConfig\") {\r\n                        \r\n                        usersId.push(user);\r\n                        const userRef = firebase.database().ref(`${user}/settings/nickname`);\r\n                        arrayPromises.push(userRef.once(\"value\"));\r\n                        \r\n                    }\r\n                }\r\n        \r\n                // Using promise.all to make sure to get all values before doing anything\r\n    \r\n                Promise.all(arrayPromises).then((values) => {\r\n                    let found = false;\r\n                    values.forEach((value, index) => {\r\n                        \r\n                        if (value.val() === this.state.nickname) {\r\n                            found = true;\r\n                            \r\n                            // If found check th other user doesnt have more than 5 conversations\r\n\r\n                            firebase.database().ref(`${usersId[index]}/chats`).once(\"value\").then((snapshot)=>{\r\n                                const conversationArray = [];\r\n                                const conversationData = snapshot.val();\r\n                                for(let conversation in conversationData){\r\n                                    conversationArray.push(conversation);\r\n                                }\r\n\r\n                                // If there are less than 5 conversations opened by the other user then create the conversation between both users if not then show the error.\r\n\r\n                                if(conversationArray.length < 5){\r\n                                    firebase.database().ref(`${this.props.userId}/chats`).update({\r\n                                        [usersId[index]]: {\r\n                                            nickname: this.state.nickname,\r\n                                            messages:\"\"\r\n                                        }\r\n                                    })\r\n            \r\n                                    firebase.database().ref(`${usersId[index]}/chats`).update({\r\n                                        [this.props.userId]: {\r\n                                            nickname: this.props.userNickname,\r\n                                            messages: \"\"\r\n                                        }\r\n                                    })\r\n\r\n                                }else{\r\n                                    this.setState({\r\n                                        errorMessage: \"The user you are trying to reach has already 5 conversations opened.\",\r\n                                        error: true\r\n                                    });\r\n                                }\r\n                            })\r\n                            \r\n                        } else if (index === (values.length - 1) && !found) {\r\n                           \r\n                            // If after going through all the nicknames there is no match then show the message that the user doesn't exists\r\n\r\n                            this.setState({\r\n                                errorMessage: `Looks like ${this.state.nickname} doesn't have an account with us!`,\r\n                                error: true\r\n                            });\r\n                        }\r\n                    }) \r\n                }) \r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n    // Render the component\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                {/* If the state error is true then show the Alert explaining the error */}\r\n\r\n                {\r\n                    this.state.error\r\n                    \r\n                    &&\r\n                        <AlertMessage\r\n                            title=\"Oops! There is a problem!\"\r\n                            message={this.state.errorMessage}\r\n                            functionToClose={() => { this.setState({ error: false }) }}\r\n                            originalLabel=\"Ok\"\r\n                            resend={false}\r\n                        />\r\n                    \r\n                }\r\n\r\n                <form className=\"addFriendBar\" action=\"\" onSubmit={this.addFriend}>\r\n                    <label htmlFor=\"nickname\">Enter nickname of a friend to start a conversation:</label>\r\n                    <input type=\"text\" id=\"nickname\" placeholder=\"Enter nickname\" value={this.state.nickname} onChange={(e)=>{this.setState({nickname: e.target.value})}} required/>\r\n                    <SubmitButton label=\"Add\" disabled={this.props.disabled} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default AddFriendButton","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./firebase\";\r\nimport ChatForm from \"./ChatForm\";\r\nimport RecentMessages from \"./RecentMessages\";\r\nimport FriendSelector from \"./FriendSelector\";\r\nimport AddFriendButton from \"./AddFriendButton\";\r\nimport AlertMessage from \"./AlertMessage\";\r\n\r\n\r\n\r\nclass ChatPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userId: props.userId,\r\n            userNickname: props.name,\r\n            userEmail: null,\r\n            chattingWithName: null,\r\n            chattingWithUid:null,\r\n            languageToTransalte: null,\r\n            friends: [],\r\n            messages: [],\r\n            language: \"\",\r\n            userImg: null,\r\n            deleteConfirmation:false,\r\n            messageToDelete: null\r\n        }\r\n    }\r\n\r\n      \r\n\r\n    componentDidMount() {\r\n\r\n        \r\n        \r\n        if (this.state.chattingWithUid !== null) {\r\n\r\n            const languageReference = firebase.database().ref(`${this.state.chattingWithUid}/settings`);\r\n            languageReference.once(\"value\").then((result) => {\r\n                this.setState({\r\n                    language: result.val().language\r\n                })\r\n            })\r\n        }\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n        const friendsReference = firebase.database().ref(`${this.state.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n        friendsReference.on(\"value\", (snapshot) => {\r\n            \r\n            const openedChatsData = snapshot.val();\r\n            const openedChats = [];\r\n            \r\n            for (let chat in openedChatsData) {\r\n                \r\n                openedChats.push({ uid: chat, name: openedChatsData[chat].nickname, });\r\n            }\r\n\r\n            // Look if the opened chat is still opened by the other user\r\n\r\n            let found = false\r\n\r\n            openedChats.forEach((chat) => {\r\n                if (chat.uid === this.state.chattingWithUid) {\r\n                    found = true;\r\n                }\r\n            })\r\n\r\n            if (found) {\r\n                // If it is not opened then just update the conversations that are opened\r\n                this.setState({\r\n                    friends: openedChats\r\n                })\r\n            } else {\r\n                // If its opened then set the chatting with information to null\r\n                this.setState({\r\n                    friends: openedChats,\r\n                    chattingWithName: null,\r\n                    chattingWithUid: null\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n    // Getting the messages between the user and the selected other user.\r\n    select = (name,uid) => {\r\n\r\n        const handle = snapshot => {\r\n            \r\n            let messages = [];\r\n            const messagesData = snapshot.val();\r\n            if(messagesData != null){\r\n                if (!messagesData.length) {\r\n                    for (let message in messagesData) {\r\n                    \r\n                        messages.push(messagesData[message]);\r\n                    } \r\n                } else {\r\n                    messages.push(messagesData);\r\n                }\r\n\r\n                // Check if there are more than 50 messages and only show the last 50 in case there are.\r\n                if (messages.length > 50) {\r\n                    messages = messages.slice(messages.length - 50, messages.length);\r\n                }\r\n            }\r\n            \r\n            this.setState({\r\n                userId: this.props.userId,\r\n                userEmail: this.props.userEmail,\r\n                messages: messages,\r\n                chattingWithName: name,\r\n                chattingWithUid: uid,\r\n                language:\"\",\r\n            })\r\n\r\n            // Make the recentMessages div scroll to th bottom when there is a new message in the active conversation\r\n\r\n            const recentMessages = document.querySelector(\".recentMessages\");\r\n            recentMessages.scrollTo({\r\n                top: recentMessages.scrollHeight,\r\n                left: 0,\r\n                behavior: \"smooth\"\r\n            })\r\n            \r\n        }\r\n        \r\n        const dbRef = firebase.database().ref(`${this.state.userId}/chats/${uid}/messages`);\r\n        dbRef.off(\"value\", handle);\r\n        dbRef.on(\"value\", handle);\r\n\r\n        // Making the page scroll when the user gets a new message\r\n\r\n        document.querySelector(\"#recentMessages\").scrollIntoView({behavior:\"smooth\"});\r\n\r\n    }\r\n\r\n    deleteConversation = () => {\r\n        const chattingWithUid = this.state.friends[this.state.messageToDelete].uid;\r\n        \r\n        // Delete thecnversation from both users\r\n\r\n        firebase.database().ref(`${this.state.userId}/chats/${chattingWithUid}`).remove().then(()=>{\r\n            \r\n            \r\n        });\r\n\r\n        firebase.database().ref(`${chattingWithUid}/chats/${this.state.userId}`).remove().then(()=>{\r\n            \r\n        });\r\n\r\n        // We make sure that f the user deleted the conversation that was selected then the \"no chat has been selected message shows\" by changing the state.\r\n\r\n        if (chattingWithUid === this.state.chattingWithUid) {\r\n            this.setState({\r\n                chattingWithName: null,\r\n                chattingWithUid: null,\r\n                deleteConfirmation: false\r\n            })\r\n\r\n        }else{\r\n            this.setState({\r\n                deleteConfirmation: false\r\n            })\r\n        }\r\n    }\r\n    \r\n        \r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                \r\n                <div className=\"chatPageContainer\">\r\n\r\n                    {/* If deleteConfirmation is true then show the confirmation alert */}\r\n\r\n                    {\r\n                        this.state.deleteConfirmation\r\n                            && (\r\n                            \r\n                            <AlertMessage\r\n                                title=\"Please confirm before proceeding!\" functionToClose={() => {\r\n                                    this.setState({\r\n                                        deleteConfirmation:false\r\n                                    })\r\n                                }}\r\n                                message=\"Are you sure you want to delete your conversation?\"\r\n                                originalLabel={<i className=\"fas fa-times-circle iconButton deny\" aria-label=\"Deny delete option\"></i>}\r\n                                aditionalButton={true}\r\n                                aditionalFunction={this.deleteConversation}\r\n                                aditionalLabel={<i className=\"fas fa-check-circle accept\" aria-label=\"Confirm delete option\"></i>}\r\n                            />\r\n                            \r\n                            ) \r\n                    \r\n                    }           \r\n                    \r\n                    \r\n                    <div className=\"listOfFriends\">\r\n\r\n                        {/* Only show the add conversation(friend) button if there are less than 5 active conversations */}\r\n\r\n                        {this.state.friends.length < 5\r\n                            &&\r\n                            <AddFriendButton disabled={this.state.userNickname ? false : true} userId={this.state.userId} userNickname={this.state.userNickname} />\r\n                        }\r\n\r\n                        <ul>\r\n                            {this.state.friends.map((friend, index) => {\r\n                                return (\r\n                                    <FriendSelector\r\n                                        key={friend.uid}\r\n                                        uid={friend.uid}\r\n                                        name={friend.name}\r\n                                        imgUrl={friend.imgUrl ? friend.imgUrl : null}\r\n                                        userNickname={this.state.userNickname}\r\n                                        function={this.select}\r\n                                        index={index}\r\n                                        deleteFunction={(e) => {\r\n                                            this.setState({\r\n                                            messageToDelete:e.currentTarget.value,\r\n                                                deleteConfirmation: true\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                )\r\n                            })}\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"messagesAndTextContainer\">\r\n                        <div>\r\n                            <p>{`Welcome`} <span>{this.props.name}</span>{`!`}</p>\r\n                            <p>This is <span className=\"logo\">interpreter!</span> Text messaging without language barrier!</p>\r\n                        </div>   \r\n                        \r\n                        <RecentMessages messages={this.state.messages} chattingWith={this.state.chattingWithName} userImg={this.state.userImg} />\r\n                        <ChatForm\r\n                            language={this.state.language}\r\n                            sender={this.state.userId}\r\n                            reciever={this.state.chattingWithUid}\r\n                            nickname={this.state.userNickname}\r\n                            chatting={this.state.chattingWithName ? true : false}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatPage;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\n\r\nclass SignInPage extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            forgetPassword: false,\r\n            emailToRecover: \"\",\r\n            emailSent: false,\r\n            google: false,\r\n        }\r\n    }\r\n\r\n    // Method that will handle all the changes in the inputs\r\n    \r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id]:event.target.value\r\n        })\r\n    }\r\n\r\n    // Method when the user submits theform with the sign in information\r\n    \r\n    signIn = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        // Storing the function from the props that will trigger the alert in case of an error\r\n\r\n        const functionToCall = this.props.signInAlert;\r\n\r\n        // Firebase method to sign in\r\n\r\n        const email = this.state.email;\r\n\r\n        const password = this.state.password;\r\n        \r\n        firebase.auth().signInWithEmailAndPassword(email,password ).then((result) => {\r\n            const userUid = result.user.uid;\r\n\r\n            // Getting the language of the user that is signed in from the database\r\n\r\n            firebase.database().ref(`${userUid}/settings/language`).once(\"value\").then((snapshot) => {\r\n                this.props.getLanguage(snapshot.val());\r\n            })\r\n            \r\n            \r\n        }).catch(function (error) {\r\n\r\n            // In case of an error we call the function that will change the state in the parent to show the alert.\r\n            \r\n            functionToCall();\r\n            \r\n            \r\n        });\r\n    }\r\n\r\n    // Method to send an email to the user in case the user forgets the password\r\n\r\n    recoverPassword = (event) => {\r\n\r\n        event.preventDefault();\r\n        firebase.auth().sendPasswordResetEmail(this.state.emailToRecover).then( () => {\r\n            this.setState({\r\n                emailSent: true\r\n            })\r\n            \r\n        })\r\n\r\n    }\r\n\r\n    // Method to sign in with google account\r\n\r\n    googleSignIn = () => {\r\n\r\n        const functionToGetUserIsNew = this.props.userIsNewFunction;\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider).then(function (result) {\r\n            \r\n            // The signed-in user info so that the app can know if the user is new and ask for the rest of the settings later.\r\n\r\n            const isUserNew = result.additionalUserInfo.isNewUser;\r\n            \r\n            functionToGetUserIsNew(isUserNew);\r\n            \r\n        })\r\n    }\r\n\r\n    \r\n    // Render the component\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"signIn\">\r\n                <form  action=\"\" onSubmit={this.signIn}>\r\n                    <h2>Sign In</h2>\r\n                    <label htmlFor=\"email\">Enter email</label>\r\n                    <input type=\"email\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                    <label htmlFor=\"password\">Enter password</label>\r\n                    <input type=\"password\" id=\"password\" onChange={this.handleChange} value={this.state.password} required/>\r\n                    <SubmitButton label=\"Sign in\" />\r\n                    \r\n                </form>\r\n\r\n                <button onClick={this.googleSignIn}>Google sign in <i className=\"fab fa-google\" aria-hidden={true}></i></button>\r\n\r\n                <button onClick={() => { this.setState({ forgetPassword: !this.state.forgetPassword }) }}>Forgot your password?</button>\r\n\r\n                {this.state.forgetPassword\r\n                    &&\r\n                    <form className=\"recoverPassword\" action=\"\" onSubmit={this.recoverPassword}>\r\n                        {this.state.emailSent\r\n                            &&\r\n                            <p>An email has been sent with the instructions to recover your password.</p>\r\n                        }\r\n                        <label htmlFor=\"emailToRecover\">Enter your email:</label>\r\n                        <input type=\"email\" id=\"emailToRecover\" onChange={this.handleChange} required />\r\n                        <SubmitButton label=\"Recover password\" />\r\n                    </form>\r\n                }\r\n\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport default SignInPage;","import React from \"react\";\r\n\r\n\r\n\r\nfunction LanguageSelector(props){\r\n\r\n    return (\r\n        <div className=\"language\">\r\n            <label htmlFor=\"language\">Select your language:  </label>\r\n            <select name=\"language\" id=\"language\" onChange={props.function} defaultValue=\"en\" required>\r\n                {props.languages.map((language, index) => {\r\n                    return <option key={index} id={language.name} value={language.code} >{language.name} </option>\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LanguageSelector;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\n\r\n\r\nclass SignUp extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"en\",\r\n            signedUp:false\r\n        }\r\n    }\r\n\r\n    getLanguage = (event) => {\r\n        \r\n        this.setState({\r\n            language: event.target.value,\r\n            \r\n        })\r\n    }\r\n\r\n    // Method to create a new user\r\n\r\n    createUser = (event) => {\r\n        event.preventDefault();\r\n\r\n        const functionToCallAlert = this.props.signUpAlert;\r\n        const nickname = this.state.name;\r\n        const nicknameFirstFiveLetters = nickname.toLowerCase().substring(0, 5);\r\n\r\n        // Checking if the user is trying to use a nickname with the word guest in order to trigger an error\r\n\r\n        if (nicknameFirstFiveLetters === \"guest\") {\r\n            functionToCallAlert();\r\n        } else {\r\n            \r\n            const databaseRef = firebase.database().ref();\r\n    \r\n            databaseRef.once(\"value\").then((snapshot) => {\r\n    \r\n                const databaseData = snapshot.val()\r\n                const arrayPromises = []\r\n                for (let user in databaseData) {\r\n                    if (user !== \"generalConfig\") {\r\n    \r\n                        \r\n                        const userRef = firebase.database().ref(`${user}/settings/nickname`);\r\n                        arrayPromises.push(userRef.once(\"value\"));\r\n    \r\n                    }\r\n                }\r\n    \r\n                // Using promise.all to make sure to get all values before doing anything\r\n    \r\n                Promise.all(arrayPromises).then((values) => {\r\n                    const existingNicknames = values.map((item) => {\r\n                        return item.val()\r\n                    });\r\n\r\n                    // If the nickname the user is trying to use already exists then trigger the Alert\r\n    \r\n                    if (existingNicknames.includes(nickname)) {\r\n    \r\n                        functionToCallAlert();\r\n                        \r\n                    } else {\r\n                        \r\n                        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((result)=>{\r\n                \r\n                            const data = {\r\n                                \r\n                                    \"chats\": false,\r\n                                    \"settings\": {\r\n                                        \"language\": this.state.language,\r\n                                        \"nickname\": this.state.name,\r\n                                        \"email\": this.state.email,\r\n                                    }\r\n                                \r\n                            }\r\n                \r\n                            firebase.database().ref(`${result.user.uid}`).update(data);\r\n                \r\n                            result.user.sendEmailVerification().then(function () {\r\n                                // Email sent.\r\n                                \r\n                            })\r\n                \r\n                            // update the profile with the nickname selected\r\n                \r\n                            result.user.updateProfile({\r\n                                displayName: this.state.name,\r\n                            })\r\n                        }).catch(() => {\r\n\r\n                            // In case the email has already been used by another user show an alert\r\n\r\n                            functionToCallAlert();\r\n\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    // Method to handle changes on the inputs\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"signUp\" action=\"\" onSubmit={this.createUser}>\r\n                <h2>Sign up</h2>\r\n                <label htmlFor=\"name\">Enter nickname</label>\r\n                <input type=\"text\" id=\"name\" maxLength={10} onChange={this.handleChange} value={this.state.name} required />\r\n                <label htmlFor=\"email\">Enter email</label>\r\n                <input type=\"email\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                <label htmlFor=\"password\">Enter password</label>\r\n                <input type=\"password\" id=\"password\" minLength={6} onChange={this.handleChange} value={this.state.password} required />\r\n                <LanguageSelector languages={this.props.languages} function={this.getLanguage} />\r\n                <SubmitButton label=\"Sign up\" />\r\n            </form>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\"\r\n\r\n\r\nclass GuestSignUp extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"en\",\r\n            userId: \"\",\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    signInGuest = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Starts loading screen\r\n\r\n        this.setState({isLoading:true})\r\n\r\n        // These makes the guest users log out if the page is refreshed\r\n\r\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE).then(() => {\r\n                \r\n            // Sign in the user anonimously\r\n\r\n            return firebase.auth().signInAnonymously().then((data) => {\r\n                        \r\n                const userId = data.user.uid;\r\n                \r\n                // Getting the current guest number to use it as the nickname\r\n\r\n                const guestNumberData = firebase.database().ref(\"/generalConfig\");\r\n\r\n                guestNumberData.once(\"value\").then((value) => {\r\n                    this.setState({\r\n                            \r\n                        userId: userId,\r\n                        \r\n                    })               \r\n                        \r\n                    // making the data object to use it later to update the databse of that guest\r\n\r\n                    const data = {\r\n\r\n                        \"chats\": false,\r\n                        \"settings\": {\r\n                            \"language\": this.state.language,\r\n                            \"nickname\": `guest${value.val().guestNumber}`,\r\n                            \"email\": null,\r\n                            \"isGuest\": true\r\n                        }\r\n\r\n                    }\r\n\r\n                    // Updating the database\r\n\r\n                    firebase.database().ref(`${userId}`).update(data);\r\n\r\n                })\r\n            }).then(() => {\r\n\r\n                // Removes loading screen\r\n\r\n                setTimeout(() => {\r\n                    this.setState({ isLoading: false })\r\n                }, 2000);\r\n                \r\n            })\r\n        })\r\n            \r\n    }\r\n\r\n    // Method to get the selected language from the language selector\r\n\r\n    getLanguage = (event) => {\r\n        this.setState({\r\n            language: event.target.value\r\n        })\r\n    }\r\n\r\n    // Rendering the component\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                {/* Loading spinner while the anonymous user is getting access */}\r\n\r\n                {this.state.isLoading\r\n                    &&\r\n                    <div className=\"loadingScreen\">\r\n                        <div className=\"lds-hourglass\"></div>\r\n                    </div>\r\n                }\r\n            <form className=\"guestSignIn\" action=\"\" onSubmit={this.signInGuest}>\r\n                \r\n                <h2>Sign up as Guest</h2>\r\n                <p>Signing in as a guest means you won't be able to select your nickname and will only be able to  get access to your conversations while logged in. If you refresh the page you will automatically log out.</p>\r\n                <p>When you log In you will recieve your guest name, use this to connect with other users. </p>\r\n                <LanguageSelector languages={this.props.languages} function={this.getLanguage} />\r\n                <SubmitButton label=\"Sign in\" />\r\n            </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default GuestSignUp;","import React from \"react\";\r\nimport firebase from \"firebase\"\r\n\r\nconst signOut = () => {\r\n    firebase.auth().signOut();\r\n}\r\n\r\n\r\nfunction Header(props) {\r\n \r\n\r\n    return (\r\n        <header>\r\n            <div className=\"wrapper\">\r\n                <div className=\"headerMain\">\r\n                    <h1>Interpreter</h1>\r\n\r\n                    {/* If the user is signed in then show the sign out and settings buttons */}\r\n\r\n                    {props.signedIn\r\n                        &&\r\n                        <nav>\r\n                            <button onClick={signOut}>Sign Out <i className=\"fas fa-sign-out-alt\" aria-hidden={true}></i></button>\r\n                            <button disabled={props.nickname ? false : true} onClick={() => { props.onClickFunction()}}>Settings <i className=\"fas fa-cogs\" aria-hidden={true}></i></button>\r\n                            \r\n                        </nav>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <p>Made by Juan Acaiturri Copyright © 2019 powered by Yandex Translate. </p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from \"react\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\nclass SettingsPage extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            language: \"en\",\r\n            currentLanguage: \"English\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const languages = this.props.languages;\r\n\r\n        const userUid = this.props.userUid;\r\n        // Getting the user current language when the settings button is clicked\r\n\r\n        firebase.database().ref(`${userUid}/settings/language`).once(\"value\").then((snapshot) => {\r\n\r\n            const currentLanguage = languages.filter((languageObject) => {\r\n                \r\n                return languageObject.code === snapshot.val()\r\n            })\r\n            \r\n            this.setState({\r\n                currentLanguage: currentLanguage[0].name\r\n            })\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    // Event to handle change on the select selection element\r\n\r\n    languagesSelection = (event) => {\r\n        this.setState({\r\n            language: event.target.value\r\n            \r\n        })\r\n       \r\n    }\r\n\r\n    // Method to apply changes to firebase database when the user saves the change\r\n\r\n    applyChange = () => {\r\n        firebase.database().ref(`${this.props.userUid}/settings/`).update({\r\n            language: this.state.language\r\n        });\r\n    }\r\n\r\n    // Rendering the component\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settingsPage\">\r\n                <button className=\"close\" onClick={this.props.closeSettings}><i className=\"fas fa-times-circle\" aria-label=\"Close settings\"></i></button>\r\n                <h2>Settings</h2>\r\n                <p>Current language is set to: <span>{ this.state.currentLanguage}</span></p>\r\n                <p>Changing the language won't translate your old messages, only new messages will be recieved in the new selected language.</p>\r\n                <form action=\"\" onSubmit={this.applyChange}>\r\n                    <LanguageSelector function={this.languagesSelection} languages={this.props.languages} />\r\n                    <SubmitButton label=\"Apply change\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default SettingsPage","import React from \"react\";\r\n\r\n\r\nfunction Introduction(props) {\r\n    return(\r\n        <div className=\"introduction\">\r\n            \r\n            <p>Welcome to <span className=\"logo\">Interpreter!</span></p>\r\n            <p>The text messaging system where you don't have to worry about speaking the same language to have a conversation with other people!</p>\r\n                    \r\n            <p>Please create an account or sign in as a guest.</p>\r\n    \r\n            <button className=\"submitButton\" onClick={props.functionToClose}>Start!</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Introduction","import React, { Component } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\nclass GoogleSignIn extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nickname: \"\",\r\n            language: \"en\",\r\n\r\n        }\r\n    }\r\n\r\n    setupNicknameAndLanguage = (event) => {\r\n        event.preventDefault();\r\n        \r\n        const functionToCallAlert = this.props.googleNicknameAlertFunction;\r\n        const nickname = this.state.nickname;\r\n        const nicknameFirstFiveLetters = nickname.toLowerCase().substring(0, 5);\r\n        \r\n        const language = this.state.language;\r\n\r\n        const user = firebase.auth().currentUser;\r\n\r\n        const updateNicknameFunction = this.props.updateNickname;\r\n\r\n\r\n        if (nicknameFirstFiveLetters === \"guest\") {\r\n            functionToCallAlert();\r\n        } else {\r\n\r\n\r\n            const databaseRef = firebase.database().ref();\r\n\r\n            databaseRef.once(\"value\").then((snapshot) => {\r\n\r\n                const databaseData = snapshot.val()\r\n                const arrayPromises = []\r\n                for (let user in databaseData) {\r\n                    if (user !== \"generalConfig\") {\r\n\r\n\r\n                        const userRef = firebase.database().ref(`${user}/settings/nickname`);\r\n                        arrayPromises.push(userRef.once(\"value\"));\r\n\r\n                    }\r\n                }\r\n\r\n                // Using promise.all to make sure to get all values before doing anything\r\n\r\n                Promise.all(arrayPromises).then((values) => {\r\n                    const existingNicknames = values.map((item) => {\r\n                        return item.val()\r\n                    });\r\n\r\n                    if (existingNicknames.includes(nickname)) {\r\n\r\n                        functionToCallAlert();\r\n\r\n                    } else {\r\n        \r\n                        const data = {\r\n\r\n                            \"chats\": false,\r\n                            \"settings\": {\r\n                                \"language\": language,\r\n                                \"nickname\": nickname,\r\n                                \"email\": user.email,\r\n                            }\r\n\r\n                        }\r\n\r\n                        firebase.database().ref(`${user.uid}`).update(data);\r\n\r\n                        user.updateProfile({\r\n                            displayName: nickname,\r\n                        })\r\n\r\n                        this.setState({\r\n                            nickname:nickname\r\n                        },() => {\r\n                                updateNicknameFunction(nickname);\r\n                                setTimeout(() => {\r\n                                    window.location.reload();\r\n                                }, 1000);\r\n                             \r\n                            }\r\n                        )\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"googleSignIn\">\r\n                <h3>Google Sign In</h3>\r\n                <form action=\"\" onSubmit={this.setupNicknameAndLanguage}>\r\n                    <p>Please fill the following form in order to continue:</p>\r\n                    <label htmlFor=\"nickname\">Enter a nickname: </label>\r\n                    <input maxLength={10} type=\"text\" id=\"nickname\" value={this.state.nickname} onChange={(e)=>{this.setState({nickname:e.target.value})}} required />\r\n                    <LanguageSelector languages={this.props.languages} function={(e) => { this.setState({ language: e.target.value }) }} />\r\n                    <SubmitButton label=\"Save settings\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleSignIn;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase\";\nimport axios from \"axios\";\nimport ChatPage from \"./ChatPage\";\nimport SignInPage from \"./SignInPage\";\nimport SignUp from './SignUp';\nimport GuestSignUp from './GuestSignIn';\nimport AlertMessage from \"./AlertMessage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport SettingsPage from \"./SettingsPage\";\nimport Introduction from \"./Introduction\";\nimport GoogleSignIn from \"./GoogleSignIn\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      signedIn: false,\n      userId: null,\n      userEmail: null,\n      name: null,\n      language: null,\n      verified: null,\n      optionSelected: \"signIn\",\n      languagesList: [\"english\"],\n      settingsStatus: false,\n      signInAlert: false,\n      verifyAlert: false,\n      introduction: \"\",\n      nicknameAlert: false,\n      userIsNew: false,\n      isLoading: true,\n    }\n  }\n\n  \n// When the app starts set a listener to check if the user has logged in.\n\n  componentDidMount() {\n    \n    firebase.auth().onAuthStateChanged((user) => {\n\n      // If the user has logged in and is a new user (In case the user used google sign in) then get rid of the display name that comes from the google acount. Having no display name will trigger the prompt that asks the user to input a nickname and a language later.\n\n      if (user && this.state.userIsNew) {\n        \n        user.updateProfile({\n          displayName: \"\",\n        });\n\n        this.setState({\n          name: null,\n          signedIn: true,\n          email: user.email,\n          userId: user.uid,\n          isLoading: false\n\n        })\n\n      // If the user has logged in and has a verified email then rerender the page to let the user use the chat\n\n      }else if (user && user.emailVerified) {\n        \n        this.setState({\n          signedIn: true,\n          userId: user.uid,\n          name: user.displayName,\n          email: user.email,\n          language: \"\",\n          isLoading: false\n        })\n\n      \n      // If the user has logged in and the user's email hasn't been verified but has an email the show the alert that tells the user he needs to verify the email\n\n      }else if (user && !user.emailVerified && user.email) {\n        this.setState({\n          verifyAlert: true,\n          isLoading: false\n        })\n\n        // If the user has logged in and is anonymous (guest sign in) then give the user a number by checking in the databse de last guest user number and update the database with the guest number.\n\n      } else if (user && user.isAnonymous) {\n        const guestNumberData = firebase.database().ref(\"/generalConfig\");\n        \n        guestNumberData.once(\"value\").then((snapshot) => {\n          this.setState({\n            signedIn: true,\n            userId: user.uid,\n            email: null,\n            isLoading: false,\n            name: `guest${snapshot.val().guestNumber}`\n          })\n\n          guestNumberData.update({\n            guestNumber: snapshot.val().guestNumber + 1\n          });\n          \n        });\n\n      // If the user is not logged in then set the signedIn property of the state to false in order to show the sign in/log in pages\n      } else {\n        \n        this.setState({\n          signedIn: false,\n          userId: null,\n          introduction: true,\n          isLoading: false\n        })\n      }\n    })\n\n    // Making an axios call to the API to get all the available languages when the app starts in order to use them in the language selector component\n\n    axios({\n      method: \"get\",\n      url: \"https://translate.yandex.net/api/v1.5/tr.json/getLangs\",\n      responseType: \"json\",\n      params: {\n        key: \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\",\n        ui: \"en\"\n      }\n    }).then((data) => {\n      \n      const languageObject = data.data.langs;\n      let languagesList = [];\n    \n\n      // Making an array that will store in objects both the language code and language name.\n\n      for (let lang in languageObject) {\n        languagesList.push({\n          name: languageObject[lang],\n          code: lang\n        })\n\n      }\n\n      // We sort the lanugauges to order them in alphabetical order\n      \n\n      languagesList = languagesList.sort(function (a, b) {\n        return ((a.name < b.name) ? -1 : ((a.name === b.name) ? 0 : 1));\n      });\n\n      // Storing the list of available lenguages in state and rerendering to show the options to the user\n      this.setState({\n        languagesList: languagesList,\n\n      })\n    })\n    \n  }\n\n  // create a method that gets the language from the language selector component and updates the state of the selected language in the general App component\n\n  getLanguage = (language) => {\n    this.setState({\n      language: language\n    })\n  }\n\n  // rendering\n\n  render() {\n\n    return (\n      \n      <React.Fragment>\n\n        {this.state.isLoading\n          && \n          <div className=\"loadingScreen\">\n            <div className=\"lds-hourglass\"></div>\n          </div>\n        }\n        \n\n        {/* Rendering the Header component and passing the nickname and signed in status in order to let the component know if the options should show or not and if the buttons should be disabled or not */}\n\n        <Header nickname={this.state.name} signedIn={this.state.signedIn} onClickFunction={() => { this.setState({ settingsStatus: !this.state.settingsStatus })}} />\n\n        <main>\n\n          <div className=\"wrapper\">\n\n            <div className=\"mainDiv\">\n\n              {/* If the state property is true then render the introduction prompt */}\n\n              {this.state.introduction\n                &&\n                <Introduction functionToClose={() => { this.setState({ introduction: false }) }} />\n                \n              }\n\n              {/*======================\n               ALERTS SECTION\n               ======================= */}\n\n              {/* If the nickNameAlert property is true then render the Alert prompt */}\n\n              {this.state.nicknameAlert\n                &&\n                <AlertMessage\n                  title=\"Oops! there was a problem!\"\n                  functionToClose={() => { this.setState({ nicknameAlert: false }) }}\n                  message=\"The nickname you are trying to register is already in used or the email you are trying to use has already been used by another user!\"\n                  aditionalButton={false}\n                  originalLabel=\"Ok\"\n                />\n\n              }\n\n              {/* If the verifyAlert state property is true then render the Alert component letting the user now that needs to verify the account on the email */}\n\n              {this.state.verifyAlert\n                &&\n                <AlertMessage\n                  title=\"An email has been sent to you!\"\n                  functionToClose={() => { window.location.reload() }}\n                  message=\"Please verify your acount and refresh after! You should have recieved an email with the steps to follow!\"\n                  originalLabel=\"Ok\"\n                  aditionalButton={true}\n                  aditionalFunction={() => { firebase.auth().currentUser.sendEmailVerification() }}\n                  aditionalLabel=\"Resend email\"\n                />\n    \n              }\n\n              {/* If the signInAlert is true the render the Alert that lets the user now there has been a problem */}\n\n              {this.state.signInAlert\n                &&\n                <AlertMessage\n                  title=\"Oops! there was a problem!\"\n                  functionToClose={() => { this.setState({ signInAlert: false }) }}\n                  message=\"You have entered an incorrect email or password!\"\n                  aditionalButton={false}\n                  originalLabel=\"Ok\"\n                />\n                \n              }\n\n              {/* If the user is new or if the user has no nickname(In the case of using google sign in) and the user has signed in then render the GoogleSignIn component in order to ask the user for a language and a nickname */}\n\n              {(this.state.userIsNew || this.state.name === null) && this.state.signedIn\n                &&\n                <GoogleSignIn\n                  googleNicknameAlertFunction={() => {this.setState({nicknameAlert: true })}}\n                  userUid={this.state.userId}\n                  updateNickname={(nickname) => { this.setState({ name: nickname }) }}\n                  userEmail={this.state.userEmail}\n                  languages={this.state.languagesList}\n                />\n              }\n\n              {/*======================\n               ALERTS SECTION ENDS\n               ======================= */}\n              \n\n              {/* If the user is signed in then render the chatPage component if not then render the sign in/ log in options */}\n              \n              {this.state.signedIn\n                ?\n\n                // Chat page component\n\n                <ChatPage userId={this.state.userId} name={this.state.name} language={this.state.language} friendsVisible={this.state.friendsVisible} />\n                \n                :\n\n                // Sign in/ log in component\n\n                <div className=\"options\">\n\n                  {/* Buttons to select the log in/ sign in option */}\n\n                  <div className=\"optionsButtons\">\n\n                    <button onClick={(e) => this.setState({ optionSelected: e.target.value })} value=\"signIn\" className={this.state.optionSelected === \"signIn\" ? \"\" : \"inactive\"} disabled={this.state.optionSelected === \"signIn\" ? true : false}>Sign In</button>\n\n                    <button onClick={(e) => this.setState({ optionSelected: e.target.value })} value=\"signUp\" className={this.state.optionSelected === \"signUp\" ? \"\" : \"inactive\"} disabled={this.state.optionSelected === \"signUp\" ? true : false}>Sign Up</button>\n\n                    <button onClick={(e) => this.setState({ optionSelected: e.target.value })} value=\"guestSignIn\" className={this.state.optionSelected === \"guestSignIn\" ? \"\" : \"inactive\"} disabled={this.state.optionSelected === \"guestSignIn\" ? true : false}>Guest Sign In</button>\n\n                  </div>\n\n                  {/* Render the component depending on the log in/ sign in option selected by the user */}\n\n                  {this.state.optionSelected === \"signIn\"\n                    \n                    ?\n\n                    <SignInPage userIsNewFunction={(trueOrFalse) => { this.setState({ userIsNew: trueOrFalse }) }}  languages={this.state.languagesList} getLanguage={this.getLanguage} signInAlert={()=>{this.setState({signInAlert:true})}} />\n                    \n                    :\n\n                    this.state.optionSelected === \"signUp\"\n                      \n                      ?\n\n                      <SignUp function={this.getLanguage} languages={this.state.languagesList} signUpAlert={() => {\n                        this.setState({nicknameAlert: true})}}/>\n                        \n                      :\n\n                      <GuestSignUp languages={this.state.languagesList} />\n                  }\n\n                </div>\n              }\n\n              {/* If the settingsStatus is true and the user is signed in then show the settings */}\n                    \n              {this.state.settingsStatus\n                \n                &&\n\n                <SettingsPage\n                  userUid={this.state.userId}\n                  languages={this.state.languagesList}\n                  currentLanguage={this.state.language}\n                  closeSettings={() => { this.setState({ settingsStatus: !this.state.settingsStatus })}}\n                />\n              }\n\n            </div>\n\n          </div>\n\n        </main>\n\n        <Footer/>\n      \n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}