{"version":3,"sources":["firebase.js","SubmitButton.js","translate.js","ChatForm.js","RecentMessages.js","FriendSelector.js","AlertMessage.js","AddFriendButton.js","ChatPage.js","SignInPage.js","LanguageSelector.js","SignUp.js","GuestSignIn.js","Header.js","Footer.js","SettingsPage.js","App.js","serviceWorker.js","index.js","noImage.png"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SubmitButton","props","className","type","label","translatorApiKey","translate","text","sender","reciever","nickname","database","ref","once","then","snapshot","language","val","axios","method","url","responseType","params","key","format","lang","data","translation","join","dbRef","translatedMessage","Date","now","toString","split","splice","push","set","catch","error","console","log","ChatForm","handleSubmit","event","preventDefault","message","state","handleChange","setState","target","value","action","onSubmit","this","name","id","cols","rows","onChange","disabled","required","Component","RecentMessages","userImg","src","alt","noImage","chattingWith","messages","map","index","time","FriendSelector","onClick","function","currentTarget","uid","imgUrl","deleteFunction","AlertMessage","functionToClose","resend","auth","currentUser","sendEmailVerification","AddFriendButton","addFriend","usersId","openedChats","includes","userNickname","errorMessage","databaseData","arrayPromises","user","userRef","Promise","all","values","found","forEach","conversationArray","conversationData","conversation","length","userId","update","closeAlert","on","openedChatsData","chat","htmlFor","placeholder","ChatPage","select","handle","messagesData","userEmail","chattingWithName","chattingWithUid","off","deleteConversation","indexToDelete","friends","remove","languageToTransalte","result","friend","SignInPage","signIn","signInWithEmailAndPassword","email","password","userUid","getLanguage","errorCode","code","recoverPassword","sendPasswordResetEmail","emailToRecover","emilSent","forgetPassword","emailSent","LanguageSelector","languages","selected","SignUp","createUser","createUserWithEmailAndPassword","updateProfile","displayName","signedUp","maxLength","GuestSignUp","signInGuest","setPersistence","Auth","Persistence","NONE","signInAnonymously","guestNumber","signOut","Header","signedIn","onClickFunction","Footer","SettingsPage","languagesSelection","applyChange","currentLanguage","filter","languageObject","languageSelection","App","alert","verified","optionSelected","friendsVisible","languagesList","settingsStatus","onAuthStateChanged","emailVerified","guestNumberData","ui","langs","sort","a","b","e","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.23771010.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBlKx7tzmawALlymKEkgJZiLdY4IE2VXHg\",\r\n    authDomain: \"translatechat-6c518.firebaseapp.com\",\r\n    databaseURL: \"https://translatechat-6c518.firebaseio.com\",\r\n    projectId: \"translatechat-6c518\",\r\n    storageBucket: \"translatechat-6c518.appspot.com\",\r\n    messagingSenderId: \"187513714020\",\r\n    appId: \"1:187513714020:web:aa171bc1b36018a37d3671\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n","import React from \"react\";\r\n\r\nfunction SubmitButton(props) {\r\n    return (\r\n        <button className=\"submitButton\" type=\"submit\">{props.label}</button>\r\n    )\r\n}\r\n\r\nexport default SubmitButton;","import axios from \"axios\";\r\nimport firebase from \"firebase\";\r\n\r\nconst translatorApiKey = \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\";\r\n\r\nfunction translate(text,sender,reciever,nickname) {\r\n\r\n\r\n    firebase.database().ref(`${reciever}/settings/language`).once(\"value\").then((snapshot)=>{\r\n        \r\n        const language = snapshot.val();       \r\n\r\n        axios({\r\n            method:\"get\",\r\n            url: \"https://translate.yandex.net/api/v1.5/tr.json/translate\",\r\n            responseType: \"json\",\r\n            params: {\r\n                key: translatorApiKey,\r\n                text: text,\r\n                format: \"plain\",\r\n                lang: language,\r\n            }\r\n        }).then((data) => {\r\n            const translation = data.data.text.join(\"\");\r\n            const dbRef = firebase.database().ref(`${reciever}/chats/${sender}/messages`);\r\n            const translatedMessage = {\r\n                \"message\": translation,\r\n                \"type\": \"recieved\",\r\n                \"time\": Date(Date.now().toString()).split(\" GMT\").splice(1, 1)\r\n            }\r\n            dbRef.push(translatedMessage);\r\n            \r\n\r\n            firebase.database().ref(`${reciever}/chats/${sender}/nickname`).set(nickname);\r\n\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default translate;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport translate from \"./translate\"\r\n\r\n\r\nclass ChatForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            text:\"\"\r\n        }\r\n    }\r\n    \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref(`${this.props.sender}/chats/${this.props.reciever}/messages`);\r\n\r\n        const message = {\r\n            \"message\": this.state.text,\r\n            \"type\": \"sent\",\r\n            \"time\": Date(Date.now().toString()).split(\" GMT\").splice(0, 1)\r\n        }\r\n        dbRef.push(message);\r\n        \r\n        translate(this.state.text,this.props.sender,this.props.reciever,this.props.nickname);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"chatForm\" action=\"\" onSubmit={this.handleSubmit}>\r\n                <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" value={this.state.text} onChange={this.handleChange} disabled={this.props.reciever?false:true} required></textarea>\r\n                <SubmitButton label=\"Send\"/>\r\n            </form>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default ChatForm;","import React from \"react\";\r\nimport noImage from \"./noImage.png\"\r\n\r\n\r\nfunction RecentMessages(props) {\r\n    return (\r\n        <div className=\"recentMessagesDiv\">\r\n            <div className=\"chatHeader\">\r\n                {props.userImg\r\n                    ?\r\n                    <img src={props.userImg} alt=\"\" />\r\n                    :\r\n                    <img src={noImage} alt=\"\" />\r\n                }\r\n                    \r\n                {props.chattingWith\r\n                    ?\r\n                    \r\n                    <h2>{props.chattingWith}</h2>\r\n                \r\n                :\r\n                <h2>No chat has been selected!</h2>\r\n\r\n                }\r\n            </div>\r\n            <ul className=\"recentMessages\">\r\n                {   \r\n                    props.messages.map((message, index) => {\r\n                        return (\r\n                            <li key={index} className={message.type} >\r\n                                <p className=\"time\">{message.time}</p>\r\n                                <p>{message.message}</p>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentMessages;","import React from \"react\";\r\nimport noImage from \"./noImage.png\";\r\n\r\n\r\n\r\nfunction FriendSelector(props) {\r\n\r\n    const setName = function(event){\r\n        props.function(event.currentTarget.value, event.currentTarget.id);\r\n    }\r\n\r\n    const deleteConversation = (event) => {\r\n       \r\n        props.deleteFunction(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <li className=\"friendButton\">\r\n            <button onClick={setName} value={props.name} id={props.uid}>\r\n                {props.imgUrl\r\n                    ?\r\n                    <img src={props.imgUrl} alt={`A picture of ${props.name}`}/>\r\n                    :\r\n                <img src={noImage} alt={`The user has no picture`}/>\r\n            } \r\n                <p>{props.name}</p>\r\n            </button>\r\n            <button className=\"deleteButton\" onClick={deleteConversation} value={props.index}><i className=\"fas fa-trash-alt\"></i></button>\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default FriendSelector;","import React from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\n\r\nfunction AlertMessage(props) {\r\n    \r\n    const close = () => {\r\n        props.functionToClose();\r\n        console.log(props);\r\n    }\r\n\r\n    const resendEmail = () => {\r\n        firebase.auth().currentUser.sendEmailVerification();\r\n    }\r\n\r\n    return(\r\n        <div className=\"alert\">\r\n            <h2>{props.message}</h2>\r\n            <div>\r\n                <button onClick={close}>Ok</button>\r\n                {props.resend\r\n                    ?\r\n                    <button onClick={resendEmail}>Resend email</button>\r\n                    :\r\n                    \"\"\r\n                }\r\n            \r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertMessage;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"./firebase\";\r\nimport AlertMessage from \"./AlertMessage\";\r\nimport { isGenericTypeAnnotation } from \"@babel/types\";\r\n\r\nclass AddFriendButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nickname:null,\r\n            openedChats: [],\r\n            error: false,\r\n            errorMessage:\"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n            const friendsReference = firebase.database().ref(`${this.props.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n        \r\n\r\n            friendsReference.on(\"value\", (snapshot) => {\r\n                const openedChats = [];\r\n                const openedChatsData = snapshot.val();\r\n                \r\n                for (let chat in openedChatsData) {\r\n               \r\n                    openedChats.push(openedChatsData[chat].nickname);\r\n                }\r\n                \r\n                this.setState({\r\n                    openedChats:openedChats\r\n                })\r\n\r\n            })\r\n\r\n    }\r\n    \r\n    addFriend = (event) => {\r\n        event.preventDefault()\r\n        const userList = [];\r\n        const usersId = []\r\n\r\n        // Checking if theres no opened conversations opened with that user and that the user isnt trying to start a conversation with itself\r\n        \r\n        if(this.state.openedChats.includes(this.state.nickname) || (this.state.nickname === this.props.userNickname)){\r\n            \r\n            \r\n            this.setState({\r\n                errorMessage: `You already have an opened chat with ${this.state.nickname}`,\r\n                error: true\r\n            });\r\n            \r\n        }else{\r\n\r\n            const databaseRef = firebase.database().ref();\r\n        \r\n            databaseRef.once(\"value\").then((snapshot) => {\r\n                \r\n                const databaseData = snapshot.val()\r\n                const arrayPromises = []\r\n                for (let user in databaseData) {\r\n                    if (user !== \"generalConfig\") {\r\n                        \r\n                        usersId.push(user);\r\n                        const userRef = firebase.database().ref(`${user}/settings/nickname`);\r\n                        arrayPromises.push(userRef.once(\"value\"));\r\n                        \r\n                    }\r\n                }\r\n        \r\n                // Using promise.all to make sure to get all values before doing anything\r\n    \r\n                Promise.all(arrayPromises).then((values) => {\r\n                    let found = false;\r\n                    values.forEach((value, index) => {\r\n                        \r\n                        if (value.val() === this.state.nickname) {\r\n                            found = true;\r\n                            \r\n                            \r\n\r\n                            // If found check th other user doesnt have more than 5 conversations\r\n\r\n                            firebase.database().ref(`${usersId[index]}/chats`).once(\"value\").then((snapshot)=>{\r\n                                const conversationArray = [];\r\n                                const conversationData = snapshot.val();\r\n                                for(let conversation in conversationData){\r\n                                    conversationArray.push(conversation);\r\n                                }\r\n                                if(conversationArray.length <=5){\r\n                                    firebase.database().ref(`${this.props.userId}/chats`).update({\r\n                                        [usersId[index]]: {\r\n                                            nickname: this.state.nickname,\r\n                                            messages:\"\"\r\n                                        }\r\n                                    })\r\n            \r\n                                    firebase.database().ref(`${usersId[index]}/chats`).update({\r\n                                        [this.props.userId]: {\r\n                                            nickname: this.props.userNickname,\r\n                                            messages: \"\"\r\n                                        }\r\n                                    })\r\n\r\n                                }else{\r\n                                    this.setState({\r\n                                        errorMessage: \"The user you are trying to reach has already 5 conversations opened.\",\r\n                                        error: true\r\n                                    });\r\n                                }\r\n                            })\r\n                            \r\n                        } else if (index === (values.length - 1) && !found) {\r\n                           console.log(found)\r\n                            this.setState({\r\n                                errorMessage: `${this.state.nickname} doesn't have an account!`,\r\n                                error: true\r\n                            });\r\n                        }\r\n                    })\r\n\r\n                    \r\n                })\r\n        \r\n                \r\n            })\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    handleChange = (event) => {\r\n        this.setState({\r\n            nickname: event.target.value\r\n        })\r\n    }\r\n\r\n    closeAlert = () => {\r\n        this.setState({\r\n            error:false\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error\r\n                    ?\r\n                    <AlertMessage message={this.state.errorMessage} functionToClose={this.closeAlert} resend={false}/>\r\n                    :\r\n                    \"\"\r\n                }\r\n                \r\n                <form className=\"addFriendBar\" action=\"\" onSubmit={this.addFriend}>\r\n                    <label htmlFor=\"nickname\">Enter nickname of a friend to start a conversation:</label>\r\n                    <input type=\"text\" id=\"nickname\" placeholder=\"Enter nickname\" value={this.state.nickname} onChange={this.handleChange} required/>\r\n                    <SubmitButton label=\"Add\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default AddFriendButton","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./firebase\";\r\nimport ChatForm from \"./ChatForm\";\r\nimport RecentMessages from \"./RecentMessages\";\r\nimport FriendSelector from \"./FriendSelector\";\r\nimport AddFriendButton from \"./AddFriendButton\";\r\n\r\n\r\n\r\nclass ChatPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userId: props.userId,\r\n            userNickname: props.name,\r\n            userEmail: null,\r\n            chattingWithName: null,\r\n            chattingWithUid:null,\r\n            languageToTransalte: null,\r\n            friends: [],\r\n            messages: [],\r\n            language: \"\",\r\n            userImg: null\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    componentDidMount() {\r\n        \r\n        if (this.state.chattingWithUid !== null) {\r\n\r\n            const languageReference = firebase.database().ref(`${this.state.chattingWithUid}/settings`);\r\n            languageReference.once(\"value\").then((result) => {\r\n                this.setState({\r\n                    language: result.val().language\r\n                })\r\n            })\r\n        }\r\n\r\n        // Getting the reference of all the opened chats of the user\r\n            const friendsReference = firebase.database().ref(`${this.state.userId}/chats`)\r\n\r\n        // Seting up listener in order to get any changes on the database of incoming conversations.\r\n\r\n            friendsReference.on(\"value\", (snapshot) => {\r\n                \r\n                const openedChatsData = snapshot.val();\r\n                const openedChats = [];\r\n                \r\n                for (let chat in openedChatsData) {\r\n                    console.log(openedChatsData[chat])\r\n                    openedChats.push({ uid: chat, name: openedChatsData[chat].nickname, });\r\n                }\r\n\r\n                \r\n\r\n                // Rendering informaion on page\r\n                this.setState({\r\n                    friends: openedChats\r\n                })\r\n\r\n            })\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    \r\n    \r\n    // Getting the messages between the user and the selected other user.\r\n    select = (name,uid) => {\r\n\r\n        const handle = snapshot => {\r\n            \r\n            const messages = [];\r\n            const messagesData = snapshot.val();\r\n            if(messagesData != null){\r\n                if (!messagesData.length) {\r\n                    for (let message in messagesData) {\r\n                    \r\n                        messages.push(messagesData[message]);\r\n                    } \r\n                } else {\r\n                    messages.push(messagesData);\r\n                }\r\n\r\n                console.log(messages);\r\n\r\n            }\r\n            \r\n\r\n            this.setState({\r\n                userId: this.props.userId,\r\n                userEmail: this.props.userEmail,\r\n                messages: messages,\r\n                chattingWithName: name,\r\n                chattingWithUid: uid,\r\n                language:\"\",\r\n            })\r\n        }\r\n        console.log(`${this.state.userId}/${uid}`);\r\n        const dbRef = firebase.database().ref(`${this.state.userId}/chats/${uid}/messages`);\r\n        dbRef.off(\"value\", handle);\r\n        dbRef.on(\"value\", handle);\r\n\r\n    }\r\n\r\n    deleteConversation = (indexToDelete) => {\r\n        \r\n        firebase.database().ref(`${this.state.userId}/chats/${this.state.friends[indexToDelete].uid}`).remove().then(()=>{\r\n            console.log(\"deleted\");\r\n        });\r\n\r\n        firebase.database().ref(`${this.state.friends[indexToDelete].uid}/chats/${this.state.userId}`).remove().then(()=>{\r\n            console.log(\"deleted\");\r\n        });\r\n    }\r\n    \r\n        \r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                \r\n                \r\n                <div className=\"chatPageContainer\">\r\n\r\n                    \r\n                    \r\n                    <div className=\"listOfFriends\">\r\n                        {/* Only show the add conversation(friend) button if there are less than 5 active conversations */}\r\n                    {this.state.friends.length <= 5\r\n                        ?\r\n                        <AddFriendButton userId={this.state.userId} userNickname={this.state.userNickname} />\r\n                        :\r\n                        null\r\n                        }\r\n                        <ul>\r\n                            {this.state.friends.map((friend, index) => {\r\n                                return (\r\n                                    <FriendSelector key={index} uid={friend.uid} name={friend.name} imgUrl={friend.imgUrl ? friend.imgUrl : null} userNickname={this.state.userNickname} function={this.select} index={index} deleteFunction={this.deleteConversation}/>\r\n                                )\r\n                            })}\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"messagesAndTextContainer\">\r\n                        {this.state.chattingWithName\r\n                            ?\r\n                            \"\"\r\n                            :\r\n                            <h3>{`Hi ${this.props.name}! Start chatting without worrying about language barrier! `}</h3>\r\n                            }\r\n                        \r\n                        <RecentMessages messages={this.state.messages} chattingWith={this.state.chattingWithName} userImg={this.state.userImg} />\r\n                        <ChatForm  language={this.state.language} sender={this.state.userId} reciever={this.state.chattingWithUid} nickname={this.state.userNickname}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatPage;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\n\r\nclass SignInPage extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            forgetPassword: false,\r\n            emailToRecover: \"\",\r\n            emailSent:false\r\n        }\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id]:event.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n    signIn = (event) => {\r\n        event.preventDefault();\r\n        \r\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((result) => {\r\n            const userUid = result.user.uid;\r\n            firebase.database().ref(`${userUid}/settings/language`).once(\"value\").then((snapshot) => {\r\n                this.props.getLanguage(snapshot.val());\r\n            })\r\n            \r\n            \r\n        }).catch(function (error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorCode);\r\n            console.log(errorMessage);\r\n            // ...\r\n        });\r\n    }\r\n\r\n    recoverPassword = (event) => {\r\n        event.preventDefault();\r\n        firebase.auth().sendPasswordResetEmail(this.state.emailToRecover).then(function () {\r\n            this.setState({\r\n                emilSent: true\r\n            })\r\n        }).catch(function (error) {\r\n            // An error happened.\r\n        });\r\n\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"signIn\">\r\n                <form  action=\"\" onSubmit={this.signIn}>\r\n                    <h2>Sign In</h2>\r\n                    <label htmlFor=\"email\">Enter email</label>\r\n                    <input type=\"email\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                    <label htmlFor=\"password\">Enter password</label>\r\n                    <input type=\"password\" id=\"password\" onChange={this.handleChange} value={this.state.password} required/>\r\n                    <SubmitButton label=\"Sign in\" />\r\n                    \r\n                </form>\r\n                <button onClick={() => { this.setState({ forgetPassword: !this.state.forgetPassword }) }}>Forgot your password?</button>\r\n                \r\n                {\r\n                    this.state.forgetPassword\r\n                        ?\r\n                        <form className=\"recoverPassword\" action=\"\" onSubmit={this.recoverPassword}>\r\n                            <label htmlFor=\"emailToRecover\">Enter your email:</label>\r\n                            <input type=\"email\" id=\"emailToRecover\" onChange={this.handleChange} required />\r\n                            <SubmitButton label=\"Recover password\" />\r\n                        </form>\r\n                        :\r\n                        \"\"\r\n                        \r\n                }\r\n\r\n                {this.state.emailSent\r\n                    ?\r\n                    <p>An email has been sent with the instructions to recover your password.</p>\r\n                    :\r\n                    \"\"\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport default SignInPage;","import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction LanguageSelector(props){\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"language\">Select your language:  </label>\r\n            <select name=\"language\" id=\"language\" onChange={props.function} required>\r\n                {props.languages.map((language) => {\r\n                    return <option id={language.name} value={language.code} selected={language.name === \"English\" ? \"selected\" : \"\"}>{language.name} </option>\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LanguageSelector;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\n\r\n\r\nclass SignUp extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"en\",\r\n            signedUp:false\r\n        }\r\n    }\r\n\r\n    getLanguage = (event) => {\r\n        console.log(event.target.value);\r\n        this.setState({\r\n            language: event.target.value,\r\n            \r\n        })\r\n    }\r\n\r\n    \r\n\r\n    createUser = (event) => {\r\n        event.preventDefault();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((result) => {\r\n\r\n            // make sure the user can not start with guest if using nickname to store chats\r\n\r\n            const data = {\r\n                \r\n                    \"chats\": false,\r\n                    \"settings\": {\r\n                        \"language\": this.state.language,\r\n                        \"nickname\": this.state.name,\r\n                        \"email\": this.state.email,\r\n                    }\r\n                \r\n            }\r\n\r\n            console.log(data,\"here\");\r\n            console.log(\"user\",result.user.uid);\r\n\r\n            firebase.database().ref(`${result.user.uid}`).update(data);\r\n\r\n            result.user.sendEmailVerification().then(function () {\r\n                // Email sent.\r\n                \r\n            }).catch(function (error) {\r\n                // An error happened.\r\n                console.log(error);\r\n            });\r\n\r\n            \r\n\r\n            \r\n            \r\n            // result.user.language = this.state.language;\r\n\r\n            result.user.updateProfile({\r\n                displayName: this.state.name,\r\n                language:this.state.language\r\n            })\r\n\r\n            // firebase.database().ref(`user.user.uid/`).update(data);\r\n            \r\n\r\n\r\n        }).catch(function (error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            console.log(errorMessage);\r\n            // ...\r\n        });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form className=\"signUp\" action=\"\" onSubmit={this.createUser}>\r\n                <h2>Sign up</h2>\r\n                <label htmlFor=\"name\">Enter nickname</label>\r\n                <input type=\"text\" id=\"name\" maxLength={10} onChange={this.handleChange} value={this.state.name} required />\r\n                <label htmlFor=\"email\">Enter email</label>\r\n                <input type=\"email\" id=\"email\" onChange={this.handleChange} value={this.state.email} required />\r\n                <label htmlFor=\"password\">Enter password</label>\r\n                <input type=\"password\" id=\"password\" onChange={this.handleChange} value={this.state.password} required />\r\n                <LanguageSelector languages={this.props.languages} function={this.getLanguage} />\r\n                <SubmitButton label=\"Sign up\" />\r\n            </form>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\nimport LanguageSelector from \"./LanguageSelector\"\r\n\r\n\r\nclass GuestSignUp extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            name: \"\",\r\n            language: \"en\",\r\n            userId: \"\"\r\n        }\r\n    }\r\n\r\n    signInGuest = (event) => {\r\n        event.preventDefault();\r\n\r\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\r\n            .then(() => {\r\n                // Existing and future Auth states are now persisted in the current\r\n                // session only. Closing the window would clear any existing state even\r\n                // if a user forgets to sign out.\r\n                // ...\r\n                // New sign-in will be persisted with session persistence.\r\n                return firebase.auth().signInAnonymously().then((data) => {\r\n                    \r\n                    const userId = data.user.uid;\r\n\r\n                    const guestNumberData = firebase.database().ref(\"/generalConfig\");\r\n                    guestNumberData.once(\"value\").then((value) => {\r\n                        this.setState({\r\n                            \r\n                            userId: userId,\r\n                         \r\n                        })\r\n\r\n                        console.log(value.val().guestNumber);\r\n                  \r\n                        \r\n                        const data = {\r\n\r\n                            \"chats\": false,\r\n                            \"settings\": {\r\n                                \"language\": this.state.language,\r\n                                \"nickname\": `guest${value.val().guestNumber}`,\r\n                                \"email\": null,\r\n                                \"isGuest\": true\r\n                            }\r\n\r\n                        }\r\n\r\n                        firebase.database().ref(`${userId}`).update(data);\r\n\r\n                        \r\n\r\n                    })\r\n\r\n                }).catch(function (error) {\r\n                    // Handle Errors here.\r\n                    var errorCode = error.code;\r\n                    var errorMessage = error.message;\r\n                    console.log(errorMessage);\r\n                    // ...\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                // Handle Errors here.\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n            });\r\n\r\n\r\n        \r\n\r\n       \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    getLanguage = (event) => {\r\n        console.log(event.target.value);\r\n        this.setState({\r\n            language: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form className=\"guestSignIn\" action=\"\" onSubmit={this.signInGuest}>\r\n                <h2>Sign up Guest</h2>\r\n                <p>Signing in as a guest means you wont be able to select your nickname and will only be able to  get access to your conversations while logged in. If your refresh the page you will automatically logged out.</p>\r\n                <LanguageSelector languages={this.props.languages} function={this.getLanguage} />\r\n                <SubmitButton label=\"Sign in\" />\r\n                \r\n            </form>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default GuestSignUp;","import React from \"react\";\r\nimport firebase from \"firebase\"\r\n\r\nconst signOut = () => {\r\n    firebase.auth().signOut();\r\n}\r\n\r\n\r\n    \r\n\r\n\r\nfunction Header(props) {\r\n\r\n    const callSettings = () => {\r\n        props.onClickFunction()\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <header>\r\n            <div className=\"wrapper\">\r\n                <div className=\"headerMain\">\r\n                    <h1>No Barriers Chat!</h1>\r\n                    {props.signedIn\r\n                        ?\r\n                        <nav>\r\n                            <button onClick={signOut}>Sign Out</button>\r\n                            <button onClick={callSettings}>Settings</button>\r\n                        </nav>\r\n                        :\r\n                        \"\"\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <p>Made by Juan Acaiturri Copyright © 2019</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from \"react\";\r\nimport LanguageSelector from \"./LanguageSelector\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport firebase from \"firebase\";\r\n\r\nclass SettingsPage extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            language: \"english\",\r\n            currentLanguage: \"English\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        // Getting the user current language when the settings button is clicked\r\n\r\n        firebase.database().ref(`${this.props.userUid}/settings/language`).once(\"value\").then((snapshot) => {\r\n            const currentLanguage = this.props.languages.filter((languageObject) => {\r\n                \r\n                return languageObject.code === snapshot.val()\r\n            })\r\n            console.log(currentLanguage)\r\n            this.setState({\r\n                currentLanguage: currentLanguage[0].name\r\n            })\r\n        })\r\n    }\r\n\r\n    // Event to handle change on the select selection element\r\n\r\n    languagesSelection = (event) => {\r\n        this.setState({\r\n            language: event.target.value\r\n        })\r\n    }\r\n\r\n    // Funtion to apply changes to firebase database\r\n\r\n    applyChange = () => {\r\n        firebase.database().ref(`${this.props.userUid}/settings/`).update({\r\n            language: this.state.language\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settingsPage\">\r\n                <h2>Settings</h2>\r\n                <p>Current language is set to: {this.state.currentLanguage}</p>\r\n                <p>Changing the language wont translate your old messages, only new messages will be recieved in the new selected language.</p>\r\n                <form action=\"\" onSubmit={this.applyChange}>\r\n                    <LanguageSelector function={this.languageSelection} languages={this.props.languages} />\r\n                    <SubmitButton label=\"Apply change\"/>\r\n                </form>\r\n                \r\n                \r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default SettingsPage","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase\";\nimport axios from \"axios\";\nimport ChatPage from \"./ChatPage\";\nimport SignInPage from \"./SignInPage\";\nimport SignUp from './SignUp';\nimport GuestSignUp from './GuestSignIn';\nimport AlertMessage from \"./AlertMessage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport SettingsPage from \"./SettingsPage\";\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      signedIn: false,\n      userId: null,\n      userEmail: null,\n      name: null,\n      language: null,\n      verified: null,\n      alert: false,\n      optionSelected: \"signIn\",\n      friendsVisible: false,\n      languagesList: [\"english\"],\n      settingsStatus: false\n    }\n  }\n\n  \n\n  componentDidMount() {\n    \n    firebase.auth().onAuthStateChanged((user) => {\n      if (user && user.emailVerified) {\n        \n        this.setState({\n          signedIn: true,\n          userId: user.uid,\n          name: user.displayName,\n          email: user.email,\n          language: \"\"\n        })\n        \n      }else if(user && !user.emailVerified && user.email){\n        this.setState({\n          alert: true\n        })\n        // In case the user sign in as guest\n      } else if (user && user.email === null) {\n        const guestNumberData = firebase.database().ref(\"/generalConfig\");\n        \n        guestNumberData.once(\"value\").then((snapshot) => {\n          this.setState({\n            signedIn: true,\n            userId: user.uid,\n            email: null,\n            name: `guest${snapshot.val().guestNumber}`\n          })\n\n          guestNumberData.update({\n            guestNumber: snapshot.val().guestNumber + 1\n          });\n          \n        });\n        \n        \n\n\n      } else {\n        // console.log(user);\n        this.setState({\n          signedIn: false,\n          userId: null\n        })\n      }\n    })\n\n    // Making a call to the API to get all the available languages\n\n    axios({\n      method: \"get\",\n      url: \"https://translate.yandex.net/api/v1.5/tr.json/getLangs\",\n      responseType: \"json\",\n      params: {\n        key: \"trnsl.1.1.20191120T174117Z.30abf07a083257c3.606e1a38fc565562205063e541cb970657ab2600\",\n        ui: \"en\"\n      }\n    }).then((data) => {\n      \n      const languageObject = data.data.langs;\n      let languagesList = [];\n    \n\n      // Making an array that will store in objecs both the language code and language name\n\n      for (let lang in languageObject) {\n        languagesList.push({\n          name: languageObject[lang],\n          code: lang\n        })\n\n      }\n\n      // We sort the lanugauges to order them in alphabetical order\n      \n\n      languagesList = languagesList.sort(function (a, b) {\n        return ((a.name < b.name) ? -1 : ((a.name == b.name) ? 0 : 1));\n      });\n\n      // Storing the list of available lenguages in state and rerendering to show the options to the user\n      this.setState({\n        languagesList: languagesList,\n\n      })\n    })\n    \n  }\n\n  getLanguage = (language) => {\n    this.setState({\n      language: language\n    })\n  }\n\n  closeAlert = () => {\n    this.setState({\n      alert: false\n    })\n\n    \n  }\n\n  // selectOption = (event) => {\n  //   this.setState({\n  //     optionSelected:event.target.value\n  //   })\n  // }\n\n  // settings = () => {\n    \n    \n  //     this.setState({\n  //       settingsStatus: !this.state.settingsStatus\n  //     })\n      \n      \n  // }\n\n  render() {\n\n    return (\n      \n      <div>\n        <Header signedIn={this.state.signedIn} onClickFunction={() => {\n          this.setState({ settingsStatus: !this.state.settingsStatus })}} />\n        <main>\n          {this.state.signedIn\n            ?\n            <ChatPage userId={this.state.userId} name={this.state.name} language={this.state.language} friendsVisible={this.state.friendsVisible}/>\n            :\n            <div className=\"options\">\n              {this.state.alert\n                ?\n                <AlertMessage functionToClose={this.closeAlert} message=\"Please verify your email and refresh after!\" resend={true} />\n                :\n                \"\"\n              }\n              <div className=\"optionsButtons\">\n                <button onClick={(e) => this.setState({optionSelected: e.target.value})} value=\"signIn\" className={this.state.optionSelected === \"signIn\" ? \"\" : \"inactive\"}>Sign In</button>\n                <button onClick={(e) => this.setState({ optionSelected: e.target.value })} value=\"signUp\" className={this.state.optionSelected === \"signUp\" ? \"\" : \"inactive\"}>Sign Up</button>\n                <button onClick={(e) => this.setState({ optionSelected: e.target.value })} value=\"guestSignIn\" className={this.state.optionSelected === \"guestSignIn\" ? \"\" : \"inactive\"}>Guest Sign In</button>\n              </div>\n\n              {this.state.optionSelected === \"signIn\"\n                ?\n                <SignInPage getLanguage={this.getLanguage} />\n                :\n                this.state.optionSelected === \"signUp\"\n                  ?\n                  <SignUp function={this.getLanguage} languages={this.state.languagesList} />\n                  :\n                  <GuestSignUp languages={this.state.languagesList} />\n\n              }\n\n            </div>\n          }\n                \n          {this.state.settingsStatus && this.state.signedIn\n            ?\n            <SettingsPage userUid={this.state.userId} languages={this.state.languagesList} currentLanguage={this.state.language}/>\n            :\n            \"\"\n          }\n        </main>\n\n        <Footer/>\n      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/noImage.8c35acc9.png\";"],"sourceRoot":""}